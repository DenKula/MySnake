// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SneakySnake_bit_SneakySnake_bit,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.388000,HLS_SYN_LAT=207,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7317,HLS_SYN_LUT=15711,HLS_VERSION=2024_2}" *)

module SneakySnake_bit (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] ReadLength;
wire   [255:0] ReadSeq;
wire   [255:0] RefSeq;
wire   [31:0] EditThreshold;
wire   [31:0] KmerSize;
wire   [31:0] ap_return;
reg   [0:0] icmp_ln64033_reg_182;
reg   [0:0] first_iter_019_reg_194;
reg   [255:0] ReadSeq_read_reg_1368;
reg    ap_block_state1;
reg   [255:0] RefSeq_read_reg_1373;
reg   [127:0] DNA_nsh_reg_1378;
wire    ap_CS_fsm_state2;
wire    grp_NeighborhoodMap_bit_fu_206_ap_done;
reg   [127:0] DNA_shl_one_reg_1384;
reg   [127:0] DNA_shl_two_reg_1390;
reg   [127:0] DNA_shl_three_reg_1396;
reg   [127:0] DNA_shl_four_reg_1402;
reg   [127:0] DNA_shl_five_reg_1408;
reg   [127:0] DNA_shr_one_reg_1414;
reg   [127:0] DNA_shr_two_reg_1420;
reg   [127:0] DNA_shr_three_reg_1426;
reg   [127:0] DNA_shr_four_reg_1432;
reg   [127:0] DNA_shr_five_reg_1438;
wire   [0:0] or_ln706_fu_332_p2;
reg   [0:0] or_ln706_reg_1444;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] DNA_shr_two_1_fu_636_p2;
reg   [7:0] DNA_shr_two_1_reg_1448;
wire   [7:0] DNA_shr_three_1_fu_668_p2;
reg   [7:0] DNA_shr_three_1_reg_1453;
wire   [7:0] DNA_shr_four_1_fu_700_p2;
reg   [7:0] DNA_shr_four_1_reg_1458;
wire   [7:0] DNA_shr_five_1_fu_732_p2;
reg   [7:0] DNA_shr_five_1_reg_1463;
wire   [0:0] icmp_ln707_fu_785_p2;
reg   [0:0] icmp_ln707_reg_1468;
wire   [1:0] global_count_2_fu_815_p3;
reg   [1:0] global_count_2_reg_1472;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] p_val2138_i24_load_reg_1477;
reg   [7:0] p_val2036_i25_load_reg_1482;
reg   [7:0] p_val1934_i26_load_reg_1487;
reg   [7:0] p_val1832_i27_load_reg_1492;
reg   [7:0] p_val1730_i28_load_reg_1497;
reg   [7:0] p_val1628_i29_load_reg_1502;
reg   [7:0] p_val26_i30_load_reg_1507;
wire   [3:0] max_8_count_one_bit_fu_244_ap_return;
reg   [3:0] max_8_reg_1512;
wire    ap_block_pp0_stage1_11001_ignoreCallOp175;
wire   [3:0] max_7_fu_932_p3;
reg   [3:0] max_7_reg_1518;
wire   [1:0] select_ln706_fu_940_p3;
reg   [1:0] select_ln706_reg_1524;
wire   [0:0] icmp_ln640_fu_962_p2;
reg   [0:0] icmp_ln640_reg_1529;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [7:0] p_val2546_i20_load_reg_1534;
reg   [7:0] p_val2444_i21_load_reg_1539;
reg   [7:0] p_val2342_i22_load_reg_1544;
reg   [7:0] p_val2240_i23_load_reg_1549;
wire   [3:0] max_16_fu_1052_p3;
reg   [3:0] max_16_reg_1554;
wire   [1:0] global_count_fu_1138_p2;
reg   [1:0] global_count_reg_1562;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
wire    grp_NeighborhoodMap_bit_fu_206_ap_start;
wire    grp_NeighborhoodMap_bit_fu_206_ap_idle;
wire    grp_NeighborhoodMap_bit_fu_206_ap_ready;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_0;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_1;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_2;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_3;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_4;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_5;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_6;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_7;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_8;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_9;
wire   [127:0] grp_NeighborhoodMap_bit_fu_206_ap_return_10;
wire    grp_count_one_bit_fu_214_ap_ready;
reg   [7:0] grp_count_one_bit_fu_214_input_seq_val;
wire   [3:0] grp_count_one_bit_fu_214_ap_return;
wire    grp_count_one_bit_fu_219_ap_ready;
reg   [7:0] grp_count_one_bit_fu_219_input_seq_val;
wire   [3:0] grp_count_one_bit_fu_219_ap_return;
wire    grp_count_one_bit_fu_224_ap_ready;
reg   [7:0] grp_count_one_bit_fu_224_input_seq_val;
wire   [3:0] grp_count_one_bit_fu_224_ap_return;
wire    grp_count_one_bit_fu_229_ap_ready;
reg   [7:0] grp_count_one_bit_fu_229_input_seq_val;
wire   [3:0] grp_count_one_bit_fu_229_ap_return;
wire    max_5_count_one_bit_fu_234_ap_ready;
wire   [3:0] max_5_count_one_bit_fu_234_ap_return;
wire    tmp_1_i_count_one_bit_fu_239_ap_ready;
wire   [3:0] tmp_1_i_count_one_bit_fu_239_ap_return;
wire    max_8_count_one_bit_fu_244_ap_ready;
reg   [0:0] ap_phi_mux_icmp_ln64033_phi_fu_186_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_first_iter_019_phi_fu_198_p4;
reg    grp_NeighborhoodMap_bit_fu_206_ap_start_reg;
reg    ap_block_state1_ignore_call39;
wire    ap_block_pp0_stage1_ignoreCallOp169;
wire    ap_block_pp0_stage0_ignoreCallOp196;
wire    ap_block_pp0_stage1_ignoreCallOp170;
wire    ap_block_pp0_stage0_ignoreCallOp197;
wire    ap_block_pp0_stage1_ignoreCallOp171;
wire    ap_block_pp0_stage0_ignoreCallOp198;
wire    ap_block_pp0_stage1_ignoreCallOp172;
wire    ap_block_pp0_stage0_ignoreCallOp199;
wire    ap_block_pp0_stage1_ignoreCallOp173;
wire    ap_block_pp0_stage1_ignoreCallOp174;
wire    ap_block_pp0_stage1_ignoreCallOp175;
reg   [5:0] indvar_flatten14_fu_98;
wire   [5:0] add_ln707_fu_738_p2;
reg   [3:0] i15_fu_102;
wire   [3:0] i_2_fu_338_p3;
reg   [1:0] global_count16_fu_106;
wire    ap_block_pp0_stage1;
reg   [1:0] global_count_21218_fu_110;
reg   [1:0] iter31_fu_114;
wire   [1:0] iter_fu_954_p3;
reg   [1:0] global_count_332_fu_118;
wire   [1:0] global_count_3_fu_1070_p2;
reg   [3:0] i_134_fu_122;
wire   [3:0] i_fu_779_p2;
reg   [7:0] p_val2546_i20_fu_126;
wire   [7:0] shl_ln673_fu_1215_p2;
reg   [7:0] p_val2444_i21_fu_130;
wire   [7:0] shl_ln672_fu_1207_p2;
reg   [7:0] p_val2342_i22_fu_134;
wire   [7:0] shl_ln671_fu_1199_p2;
reg   [7:0] p_val2240_i23_fu_138;
wire   [7:0] shl_ln670_fu_1191_p2;
reg   [7:0] p_val2138_i24_fu_142;
wire   [7:0] shl_ln669_fu_1133_p2;
wire   [7:0] DNA_shr_one_1_fu_604_p2;
reg   [7:0] p_val2036_i25_fu_146;
wire   [7:0] shl_ln668_fu_1124_p2;
wire   [7:0] DNA_shl_five_1_fu_572_p2;
reg   [7:0] p_val1934_i26_fu_150;
wire   [7:0] shl_ln667_fu_1115_p2;
wire   [7:0] DNA_shl_four_1_fu_540_p2;
reg   [7:0] p_val1832_i27_fu_154;
wire   [7:0] shl_ln666_fu_1106_p2;
wire   [7:0] DNA_shl_three_1_fu_508_p2;
reg   [7:0] p_val1730_i28_fu_158;
wire   [7:0] shl_ln665_fu_1097_p2;
wire   [7:0] DNA_shl_two_1_fu_476_p2;
reg   [7:0] p_val1628_i29_fu_162;
wire   [7:0] shl_ln664_fu_1088_p2;
wire   [7:0] DNA_shl_one_1_fu_444_p2;
reg   [7:0] p_val26_i30_fu_166;
wire   [7:0] shl_ln663_fu_1079_p2;
wire   [7:0] DNA_nsh_1_fu_412_p2;
wire   [6:0] shl_ln_fu_346_p3;
wire   [0:0] icmp_ln710_fu_354_p2;
reg   [127:0] tmp_fu_360_p4;
wire   [6:0] xor_ln710_fu_369_p2;
wire   [6:0] select_ln710_1_fu_382_p3;
wire   [127:0] select_ln710_fu_375_p3;
wire   [127:0] zext_ln710_fu_390_p1;
wire   [127:0] lshr_ln710_fu_394_p2;
wire   [7:0] trunc_ln710_fu_400_p1;
wire   [7:0] select_ln710_2_fu_404_p3;
reg   [127:0] tmp_7_fu_418_p4;
wire   [127:0] select_ln711_fu_427_p3;
wire   [127:0] lshr_ln711_fu_434_p2;
wire   [7:0] trunc_ln711_fu_440_p1;
reg   [127:0] tmp_8_fu_450_p4;
wire   [127:0] select_ln711_1_fu_459_p3;
wire   [127:0] lshr_ln711_1_fu_466_p2;
wire   [7:0] trunc_ln711_1_fu_472_p1;
reg   [127:0] tmp_9_fu_482_p4;
wire   [127:0] select_ln711_2_fu_491_p3;
wire   [127:0] lshr_ln711_2_fu_498_p2;
wire   [7:0] trunc_ln711_2_fu_504_p1;
reg   [127:0] tmp_10_fu_514_p4;
wire   [127:0] select_ln711_3_fu_523_p3;
wire   [127:0] lshr_ln711_3_fu_530_p2;
wire   [7:0] trunc_ln711_3_fu_536_p1;
reg   [127:0] tmp_11_fu_546_p4;
wire   [127:0] select_ln711_4_fu_555_p3;
wire   [127:0] lshr_ln711_4_fu_562_p2;
wire   [7:0] trunc_ln711_4_fu_568_p1;
reg   [127:0] tmp_12_fu_578_p4;
wire   [127:0] select_ln712_fu_587_p3;
wire   [127:0] lshr_ln712_fu_594_p2;
wire   [7:0] trunc_ln712_fu_600_p1;
reg   [127:0] tmp_13_fu_610_p4;
wire   [127:0] select_ln712_1_fu_619_p3;
wire   [127:0] lshr_ln712_1_fu_626_p2;
wire   [7:0] trunc_ln712_1_fu_632_p1;
reg   [127:0] tmp_14_fu_642_p4;
wire   [127:0] select_ln712_2_fu_651_p3;
wire   [127:0] lshr_ln712_2_fu_658_p2;
wire   [7:0] trunc_ln712_2_fu_664_p1;
reg   [127:0] tmp_15_fu_674_p4;
wire   [127:0] select_ln712_3_fu_683_p3;
wire   [127:0] lshr_ln712_3_fu_690_p2;
wire   [7:0] trunc_ln712_3_fu_696_p1;
reg   [127:0] tmp_16_fu_706_p4;
wire   [127:0] select_ln712_4_fu_715_p3;
wire   [127:0] lshr_ln712_4_fu_722_p2;
wire   [7:0] trunc_ln712_4_fu_728_p1;
wire   [0:0] icmp_ln318_fu_870_p2;
wire   [3:0] max_1_fu_876_p3;
wire   [0:0] icmp_ln318_1_fu_884_p2;
wire   [3:0] max_3_fu_890_p3;
wire   [0:0] icmp_ln318_2_fu_898_p2;
wire   [3:0] max_4_fu_904_p3;
wire   [0:0] icmp_ln318_3_fu_912_p2;
wire   [3:0] max_6_fu_918_p3;
wire   [0:0] icmp_ln318_4_fu_926_p2;
wire   [1:0] add_ln640_fu_948_p2;
wire   [0:0] icmp_ln318_5_fu_994_p2;
wire   [3:0] max_9_fu_998_p3;
wire   [0:0] icmp_ln318_6_fu_1004_p2;
wire   [3:0] max_10_fu_1010_p3;
wire   [0:0] icmp_ln318_7_fu_1018_p2;
wire   [3:0] max_13_fu_1024_p3;
wire   [0:0] icmp_ln318_8_fu_1032_p2;
wire   [3:0] max_14_fu_1038_p3;
wire   [0:0] icmp_ln318_9_fu_1046_p2;
wire   [1:0] trunc_ln658_fu_1060_p1;
wire   [1:0] add_ln658_fu_1064_p2;
wire   [7:0] max_16cast_fu_1075_p1;
wire   [7:0] max_16cast161_fu_1084_p1;
wire   [7:0] max_16cast162_fu_1093_p1;
wire   [7:0] max_16cast163_fu_1102_p1;
wire   [7:0] max_16cast164_fu_1111_p1;
wire   [7:0] max_16cast165_fu_1120_p1;
wire   [7:0] max_16cast166_fu_1129_p1;
wire   [7:0] max_16cast167_fu_1188_p1;
wire   [7:0] max_16cast168_fu_1196_p1;
wire   [7:0] max_16cast169_fu_1204_p1;
wire   [7:0] max_16cast170_fu_1212_p1;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_NeighborhoodMap_bit_fu_206_ap_start_reg = 1'b0;
#0 indvar_flatten14_fu_98 = 6'd0;
#0 i15_fu_102 = 4'd0;
#0 global_count16_fu_106 = 2'd0;
#0 global_count_21218_fu_110 = 2'd0;
#0 iter31_fu_114 = 2'd0;
#0 global_count_332_fu_118 = 2'd0;
#0 i_134_fu_122 = 4'd0;
#0 p_val2546_i20_fu_126 = 8'd0;
#0 p_val2444_i21_fu_130 = 8'd0;
#0 p_val2342_i22_fu_134 = 8'd0;
#0 p_val2240_i23_fu_138 = 8'd0;
#0 p_val2138_i24_fu_142 = 8'd0;
#0 p_val2036_i25_fu_146 = 8'd0;
#0 p_val1934_i26_fu_150 = 8'd0;
#0 p_val1832_i27_fu_154 = 8'd0;
#0 p_val1730_i28_fu_158 = 8'd0;
#0 p_val1628_i29_fu_162 = 8'd0;
#0 p_val26_i30_fu_166 = 8'd0;
end

SneakySnake_bit_NeighborhoodMap_bit grp_NeighborhoodMap_bit_fu_206(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_NeighborhoodMap_bit_fu_206_ap_start),
    .ap_done(grp_NeighborhoodMap_bit_fu_206_ap_done),
    .ap_idle(grp_NeighborhoodMap_bit_fu_206_ap_idle),
    .ap_ready(grp_NeighborhoodMap_bit_fu_206_ap_ready),
    .DNA_read_val(ReadSeq_read_reg_1368),
    .DNA_ref_val(RefSeq_read_reg_1373),
    .ap_return_0(grp_NeighborhoodMap_bit_fu_206_ap_return_0),
    .ap_return_1(grp_NeighborhoodMap_bit_fu_206_ap_return_1),
    .ap_return_2(grp_NeighborhoodMap_bit_fu_206_ap_return_2),
    .ap_return_3(grp_NeighborhoodMap_bit_fu_206_ap_return_3),
    .ap_return_4(grp_NeighborhoodMap_bit_fu_206_ap_return_4),
    .ap_return_5(grp_NeighborhoodMap_bit_fu_206_ap_return_5),
    .ap_return_6(grp_NeighborhoodMap_bit_fu_206_ap_return_6),
    .ap_return_7(grp_NeighborhoodMap_bit_fu_206_ap_return_7),
    .ap_return_8(grp_NeighborhoodMap_bit_fu_206_ap_return_8),
    .ap_return_9(grp_NeighborhoodMap_bit_fu_206_ap_return_9),
    .ap_return_10(grp_NeighborhoodMap_bit_fu_206_ap_return_10)
);

SneakySnake_bit_count_one_bit grp_count_one_bit_fu_214(
    .ap_ready(grp_count_one_bit_fu_214_ap_ready),
    .input_seq_val(grp_count_one_bit_fu_214_input_seq_val),
    .ap_return(grp_count_one_bit_fu_214_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit grp_count_one_bit_fu_219(
    .ap_ready(grp_count_one_bit_fu_219_ap_ready),
    .input_seq_val(grp_count_one_bit_fu_219_input_seq_val),
    .ap_return(grp_count_one_bit_fu_219_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit grp_count_one_bit_fu_224(
    .ap_ready(grp_count_one_bit_fu_224_ap_ready),
    .input_seq_val(grp_count_one_bit_fu_224_input_seq_val),
    .ap_return(grp_count_one_bit_fu_224_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit grp_count_one_bit_fu_229(
    .ap_ready(grp_count_one_bit_fu_229_ap_ready),
    .input_seq_val(grp_count_one_bit_fu_229_input_seq_val),
    .ap_return(grp_count_one_bit_fu_229_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit max_5_count_one_bit_fu_234(
    .ap_ready(max_5_count_one_bit_fu_234_ap_ready),
    .input_seq_val(p_val1934_i26_fu_150),
    .ap_return(max_5_count_one_bit_fu_234_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit tmp_1_i_count_one_bit_fu_239(
    .ap_ready(tmp_1_i_count_one_bit_fu_239_ap_ready),
    .input_seq_val(p_val2036_i25_fu_146),
    .ap_return(tmp_1_i_count_one_bit_fu_239_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_count_one_bit max_8_count_one_bit_fu_244(
    .ap_ready(max_8_count_one_bit_fu_244_ap_ready),
    .input_seq_val(p_val2138_i24_fu_142),
    .ap_return(max_8_count_one_bit_fu_244_ap_return),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ReadLength(ReadLength),
    .ReadSeq(ReadSeq),
    .RefSeq(RefSeq),
    .EditThreshold(EditThreshold),
    .KmerSize(KmerSize)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call39) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= 1'b1;
        end else if ((grp_NeighborhoodMap_bit_fu_206_ap_ready == 1'b1)) begin
            grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1468 == 1'd0))) begin
        first_iter_019_reg_194 <= 1'd0;
    end else if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        first_iter_019_reg_194 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        global_count16_fu_106 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        global_count16_fu_106 <= global_count_2_fu_815_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        global_count_332_fu_118 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        global_count_332_fu_118 <= global_count_3_fu_1070_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i15_fu_102 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i15_fu_102 <= i_2_fu_338_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_134_fu_122 <= 4'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_134_fu_122 <= i_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1468 == 1'd0))) begin
        icmp_ln64033_reg_182 <= icmp_ln640_reg_1529;
    end else if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln64033_reg_182 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_fu_98 <= 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten14_fu_98 <= add_ln707_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        iter31_fu_114 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        iter31_fu_114 <= iter_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val1628_i29_fu_162 <= DNA_shl_one_1_fu_444_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val1628_i29_fu_162 <= shl_ln664_fu_1088_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val1730_i28_fu_158 <= DNA_shl_two_1_fu_476_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val1730_i28_fu_158 <= shl_ln665_fu_1097_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val1832_i27_fu_154 <= DNA_shl_three_1_fu_508_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val1832_i27_fu_154 <= shl_ln666_fu_1106_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val1934_i26_fu_150 <= DNA_shl_four_1_fu_540_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val1934_i26_fu_150 <= shl_ln667_fu_1115_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val2036_i25_fu_146 <= DNA_shl_five_1_fu_572_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2036_i25_fu_146 <= shl_ln668_fu_1124_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val2138_i24_fu_142 <= DNA_shr_one_1_fu_604_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2138_i24_fu_142 <= shl_ln669_fu_1133_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        if (((or_ln706_reg_1444 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
            p_val2240_i23_fu_138 <= DNA_shr_two_1_reg_1448;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2240_i23_fu_138 <= shl_ln670_fu_1191_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        if (((or_ln706_reg_1444 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
            p_val2342_i22_fu_134 <= DNA_shr_three_1_reg_1453;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2342_i22_fu_134 <= shl_ln671_fu_1199_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        if (((or_ln706_reg_1444 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
            p_val2444_i21_fu_130 <= DNA_shr_four_1_reg_1458;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2444_i21_fu_130 <= shl_ln672_fu_1207_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        if (((or_ln706_reg_1444 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
            p_val2546_i20_fu_126 <= DNA_shr_five_1_reg_1463;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val2546_i20_fu_126 <= shl_ln673_fu_1215_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((or_ln706_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_val26_i30_fu_166 <= DNA_nsh_1_fu_412_p2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_val26_i30_fu_166 <= shl_ln663_fu_1079_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        DNA_nsh_reg_1378 <= grp_NeighborhoodMap_bit_fu_206_ap_return_0;
        DNA_shl_five_reg_1408 <= grp_NeighborhoodMap_bit_fu_206_ap_return_5;
        DNA_shl_four_reg_1402 <= grp_NeighborhoodMap_bit_fu_206_ap_return_4;
        DNA_shl_one_reg_1384 <= grp_NeighborhoodMap_bit_fu_206_ap_return_1;
        DNA_shl_three_reg_1396 <= grp_NeighborhoodMap_bit_fu_206_ap_return_3;
        DNA_shl_two_reg_1390 <= grp_NeighborhoodMap_bit_fu_206_ap_return_2;
        DNA_shr_five_reg_1438 <= grp_NeighborhoodMap_bit_fu_206_ap_return_10;
        DNA_shr_four_reg_1432 <= grp_NeighborhoodMap_bit_fu_206_ap_return_9;
        DNA_shr_one_reg_1414 <= grp_NeighborhoodMap_bit_fu_206_ap_return_6;
        DNA_shr_three_reg_1426 <= grp_NeighborhoodMap_bit_fu_206_ap_return_8;
        DNA_shr_two_reg_1420 <= grp_NeighborhoodMap_bit_fu_206_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DNA_shr_five_1_reg_1463 <= DNA_shr_five_1_fu_732_p2;
        DNA_shr_four_1_reg_1458 <= DNA_shr_four_1_fu_700_p2;
        DNA_shr_three_1_reg_1453 <= DNA_shr_three_1_fu_668_p2;
        DNA_shr_two_1_reg_1448 <= DNA_shr_two_1_fu_636_p2;
        icmp_ln707_reg_1468 <= icmp_ln707_fu_785_p2;
        max_16_reg_1554 <= max_16_fu_1052_p3;
        or_ln706_reg_1444 <= or_ln706_fu_332_p2;
        p_val2240_i23_load_reg_1549 <= p_val2240_i23_fu_138;
        p_val2342_i22_load_reg_1544 <= p_val2342_i22_fu_134;
        p_val2444_i21_load_reg_1539 <= p_val2444_i21_fu_130;
        p_val2546_i20_load_reg_1534 <= p_val2546_i20_fu_126;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ReadSeq_read_reg_1368 <= ReadSeq;
        RefSeq_read_reg_1373 <= RefSeq;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        global_count_21218_fu_110 <= global_count_fu_1138_p2;
        global_count_reg_1562 <= global_count_fu_1138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        global_count_2_reg_1472 <= global_count_2_fu_815_p3;
        max_7_reg_1518 <= max_7_fu_932_p3;
        p_val1628_i29_load_reg_1502 <= p_val1628_i29_fu_162;
        p_val1730_i28_load_reg_1497 <= p_val1730_i28_fu_158;
        p_val1832_i27_load_reg_1492 <= p_val1832_i27_fu_154;
        p_val1934_i26_load_reg_1487 <= p_val1934_i26_fu_150;
        p_val2036_i25_load_reg_1482 <= p_val2036_i25_fu_146;
        p_val2138_i24_load_reg_1477 <= p_val2138_i24_fu_142;
        p_val26_i30_load_reg_1507 <= p_val26_i30_fu_166;
        select_ln706_reg_1524 <= select_ln706_fu_940_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        icmp_ln640_reg_1529 <= icmp_ln640_fu_962_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp175) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_8_reg_1512 <= max_8_count_one_bit_fu_244_ap_return;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln707_reg_1468 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1468 == 1'd0))) begin
        ap_phi_mux_first_iter_019_phi_fu_198_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_019_phi_fu_198_p4 = first_iter_019_reg_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1468 == 1'd0))) begin
        ap_phi_mux_icmp_ln64033_phi_fu_186_p4 = icmp_ln640_reg_1529;
    end else begin
        ap_phi_mux_icmp_ln64033_phi_fu_186_p4 = icmp_ln64033_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_ignoreCallOp196) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_count_one_bit_fu_214_input_seq_val = p_val2240_i23_fu_138;
    end else if (((1'b0 == ap_block_pp0_stage1_ignoreCallOp169) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        grp_count_one_bit_fu_214_input_seq_val = p_val26_i30_fu_166;
    end else begin
        grp_count_one_bit_fu_214_input_seq_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_ignoreCallOp197) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_count_one_bit_fu_219_input_seq_val = p_val2342_i22_fu_134;
    end else if (((1'b0 == ap_block_pp0_stage1_ignoreCallOp170) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        grp_count_one_bit_fu_219_input_seq_val = p_val1628_i29_fu_162;
    end else begin
        grp_count_one_bit_fu_219_input_seq_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_ignoreCallOp198) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_count_one_bit_fu_224_input_seq_val = p_val2444_i21_fu_130;
    end else if (((1'b0 == ap_block_pp0_stage1_ignoreCallOp171) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        grp_count_one_bit_fu_224_input_seq_val = p_val1730_i28_fu_158;
    end else begin
        grp_count_one_bit_fu_224_input_seq_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_ignoreCallOp199) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_count_one_bit_fu_229_input_seq_val = p_val2546_i20_fu_126;
    end else if (((1'b0 == ap_block_pp0_stage1_ignoreCallOp172) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        grp_count_one_bit_fu_229_input_seq_val = p_val1832_i27_fu_154;
    end else begin
        grp_count_one_bit_fu_229_input_seq_val = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_NeighborhoodMap_bit_fu_206_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DNA_nsh_1_fu_412_p2 = (trunc_ln710_fu_400_p1 & select_ln710_2_fu_404_p3);

assign DNA_shl_five_1_fu_572_p2 = (trunc_ln711_4_fu_568_p1 & select_ln710_2_fu_404_p3);

assign DNA_shl_four_1_fu_540_p2 = (trunc_ln711_3_fu_536_p1 & select_ln710_2_fu_404_p3);

assign DNA_shl_one_1_fu_444_p2 = (trunc_ln711_fu_440_p1 & select_ln710_2_fu_404_p3);

assign DNA_shl_three_1_fu_508_p2 = (trunc_ln711_2_fu_504_p1 & select_ln710_2_fu_404_p3);

assign DNA_shl_two_1_fu_476_p2 = (trunc_ln711_1_fu_472_p1 & select_ln710_2_fu_404_p3);

assign DNA_shr_five_1_fu_732_p2 = (trunc_ln712_4_fu_728_p1 & select_ln710_2_fu_404_p3);

assign DNA_shr_four_1_fu_700_p2 = (trunc_ln712_3_fu_696_p1 & select_ln710_2_fu_404_p3);

assign DNA_shr_one_1_fu_604_p2 = (trunc_ln712_fu_600_p1 & select_ln710_2_fu_404_p3);

assign DNA_shr_three_1_fu_668_p2 = (trunc_ln712_2_fu_664_p1 & select_ln710_2_fu_404_p3);

assign DNA_shr_two_1_fu_636_p2 = (trunc_ln712_1_fu_632_p1 & select_ln710_2_fu_404_p3);

assign add_ln640_fu_948_p2 = (iter31_fu_114 + 2'd1);

assign add_ln658_fu_1064_p2 = (trunc_ln658_fu_1060_p1 + 2'd1);

assign add_ln707_fu_738_p2 = (indvar_flatten14_fu_98 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp196 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp197 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp198 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp199 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp175 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp169 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp170 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp171 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp172 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp173 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp174 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_ignoreCallOp175 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call39 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = global_count_reg_1562;

assign global_count_2_fu_815_p3 = ((icmp_ln64033_reg_182[0:0] == 1'b1) ? global_count_21218_fu_110 : global_count16_fu_106);

assign global_count_3_fu_1070_p2 = (select_ln706_reg_1524 + add_ln658_fu_1064_p2);

assign global_count_fu_1138_p2 = (global_count_3_fu_1070_p2 + global_count_2_reg_1472);

assign grp_NeighborhoodMap_bit_fu_206_ap_start = grp_NeighborhoodMap_bit_fu_206_ap_start_reg;

assign i_2_fu_338_p3 = ((ap_phi_mux_icmp_ln64033_phi_fu_186_p4[0:0] == 1'b1) ? i_134_fu_122 : i15_fu_102);

assign i_fu_779_p2 = (i_2_fu_338_p3 + 4'd1);

assign icmp_ln318_1_fu_884_p2 = ((grp_count_one_bit_fu_224_ap_return > max_1_fu_876_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_2_fu_898_p2 = ((grp_count_one_bit_fu_229_ap_return > max_3_fu_890_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_3_fu_912_p2 = ((max_5_count_one_bit_fu_234_ap_return > max_4_fu_904_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_4_fu_926_p2 = ((tmp_1_i_count_one_bit_fu_239_ap_return > max_6_fu_918_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_5_fu_994_p2 = ((max_8_reg_1512 > max_7_reg_1518) ? 1'b1 : 1'b0);

assign icmp_ln318_6_fu_1004_p2 = ((grp_count_one_bit_fu_214_ap_return > max_9_fu_998_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_7_fu_1018_p2 = ((grp_count_one_bit_fu_219_ap_return > max_10_fu_1010_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_8_fu_1032_p2 = ((grp_count_one_bit_fu_224_ap_return > max_13_fu_1024_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_9_fu_1046_p2 = ((grp_count_one_bit_fu_229_ap_return > max_14_fu_1038_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_870_p2 = ((grp_count_one_bit_fu_219_ap_return > grp_count_one_bit_fu_214_ap_return) ? 1'b1 : 1'b0);

assign icmp_ln640_fu_962_p2 = ((iter_fu_954_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln707_fu_785_p2 = ((indvar_flatten14_fu_98 == 6'd35) ? 1'b1 : 1'b0);

assign icmp_ln710_fu_354_p2 = ((shl_ln_fu_346_p3 != 7'd0) ? 1'b1 : 1'b0);

assign iter_fu_954_p3 = ((icmp_ln64033_reg_182[0:0] == 1'b1) ? 2'd1 : add_ln640_fu_948_p2);

assign lshr_ln710_fu_394_p2 = select_ln710_fu_375_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln711_1_fu_466_p2 = select_ln711_1_fu_459_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln711_2_fu_498_p2 = select_ln711_2_fu_491_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln711_3_fu_530_p2 = select_ln711_3_fu_523_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln711_4_fu_562_p2 = select_ln711_4_fu_555_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln711_fu_434_p2 = select_ln711_fu_427_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln712_1_fu_626_p2 = select_ln712_1_fu_619_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln712_2_fu_658_p2 = select_ln712_2_fu_651_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln712_3_fu_690_p2 = select_ln712_3_fu_683_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln712_4_fu_722_p2 = select_ln712_4_fu_715_p3 >> zext_ln710_fu_390_p1;

assign lshr_ln712_fu_594_p2 = select_ln712_fu_587_p3 >> zext_ln710_fu_390_p1;

assign max_10_fu_1010_p3 = ((icmp_ln318_6_fu_1004_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_214_ap_return : max_9_fu_998_p3);

assign max_13_fu_1024_p3 = ((icmp_ln318_7_fu_1018_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_219_ap_return : max_10_fu_1010_p3);

assign max_14_fu_1038_p3 = ((icmp_ln318_8_fu_1032_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_224_ap_return : max_13_fu_1024_p3);

assign max_16_fu_1052_p3 = ((icmp_ln318_9_fu_1046_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_229_ap_return : max_14_fu_1038_p3);

assign max_16cast161_fu_1084_p1 = max_16_fu_1052_p3;

assign max_16cast162_fu_1093_p1 = max_16_fu_1052_p3;

assign max_16cast163_fu_1102_p1 = max_16_fu_1052_p3;

assign max_16cast164_fu_1111_p1 = max_16_fu_1052_p3;

assign max_16cast165_fu_1120_p1 = max_16_fu_1052_p3;

assign max_16cast166_fu_1129_p1 = max_16_fu_1052_p3;

assign max_16cast167_fu_1188_p1 = max_16_reg_1554;

assign max_16cast168_fu_1196_p1 = max_16_reg_1554;

assign max_16cast169_fu_1204_p1 = max_16_reg_1554;

assign max_16cast170_fu_1212_p1 = max_16_reg_1554;

assign max_16cast_fu_1075_p1 = max_16_fu_1052_p3;

assign max_1_fu_876_p3 = ((icmp_ln318_fu_870_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_219_ap_return : grp_count_one_bit_fu_214_ap_return);

assign max_3_fu_890_p3 = ((icmp_ln318_1_fu_884_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_224_ap_return : max_1_fu_876_p3);

assign max_4_fu_904_p3 = ((icmp_ln318_2_fu_898_p2[0:0] == 1'b1) ? grp_count_one_bit_fu_229_ap_return : max_3_fu_890_p3);

assign max_6_fu_918_p3 = ((icmp_ln318_3_fu_912_p2[0:0] == 1'b1) ? max_5_count_one_bit_fu_234_ap_return : max_4_fu_904_p3);

assign max_7_fu_932_p3 = ((icmp_ln318_4_fu_926_p2[0:0] == 1'b1) ? tmp_1_i_count_one_bit_fu_239_ap_return : max_6_fu_918_p3);

assign max_9_fu_998_p3 = ((icmp_ln318_5_fu_994_p2[0:0] == 1'b1) ? max_8_reg_1512 : max_7_reg_1518);

assign or_ln706_fu_332_p2 = (ap_phi_mux_icmp_ln64033_phi_fu_186_p4 | ap_phi_mux_first_iter_019_phi_fu_198_p4);

assign select_ln706_fu_940_p3 = ((icmp_ln64033_reg_182[0:0] == 1'b1) ? 2'd0 : global_count_332_fu_118);

assign select_ln710_1_fu_382_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? xor_ln710_fu_369_p2 : 7'd0);

assign select_ln710_2_fu_404_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? 8'd3 : 8'd255);

assign select_ln710_fu_375_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_fu_360_p4 : DNA_nsh_reg_1378);

assign select_ln711_1_fu_459_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_8_fu_450_p4 : DNA_shl_two_reg_1390);

assign select_ln711_2_fu_491_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_9_fu_482_p4 : DNA_shl_three_reg_1396);

assign select_ln711_3_fu_523_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_10_fu_514_p4 : DNA_shl_four_reg_1402);

assign select_ln711_4_fu_555_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_11_fu_546_p4 : DNA_shl_five_reg_1408);

assign select_ln711_fu_427_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_7_fu_418_p4 : DNA_shl_one_reg_1384);

assign select_ln712_1_fu_619_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_13_fu_610_p4 : DNA_shr_two_reg_1420);

assign select_ln712_2_fu_651_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_14_fu_642_p4 : DNA_shr_three_reg_1426);

assign select_ln712_3_fu_683_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_15_fu_674_p4 : DNA_shr_four_reg_1432);

assign select_ln712_4_fu_715_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_16_fu_706_p4 : DNA_shr_five_reg_1438);

assign select_ln712_fu_587_p3 = ((icmp_ln710_fu_354_p2[0:0] == 1'b1) ? tmp_12_fu_578_p4 : DNA_shr_one_reg_1414);

assign shl_ln663_fu_1079_p2 = p_val26_i30_load_reg_1507 << max_16cast_fu_1075_p1;

assign shl_ln664_fu_1088_p2 = p_val1628_i29_load_reg_1502 << max_16cast161_fu_1084_p1;

assign shl_ln665_fu_1097_p2 = p_val1730_i28_load_reg_1497 << max_16cast162_fu_1093_p1;

assign shl_ln666_fu_1106_p2 = p_val1832_i27_load_reg_1492 << max_16cast163_fu_1102_p1;

assign shl_ln667_fu_1115_p2 = p_val1934_i26_load_reg_1487 << max_16cast164_fu_1111_p1;

assign shl_ln668_fu_1124_p2 = p_val2036_i25_load_reg_1482 << max_16cast165_fu_1120_p1;

assign shl_ln669_fu_1133_p2 = p_val2138_i24_load_reg_1477 << max_16cast166_fu_1129_p1;

assign shl_ln670_fu_1191_p2 = p_val2240_i23_load_reg_1549 << max_16cast167_fu_1188_p1;

assign shl_ln671_fu_1199_p2 = p_val2342_i22_load_reg_1544 << max_16cast168_fu_1196_p1;

assign shl_ln672_fu_1207_p2 = p_val2444_i21_load_reg_1539 << max_16cast169_fu_1204_p1;

assign shl_ln673_fu_1215_p2 = p_val2546_i20_load_reg_1534 << max_16cast170_fu_1212_p1;

assign shl_ln_fu_346_p3 = {{i_2_fu_338_p3}, {3'd0}};

integer ap_tvar_int_0;

always @ (DNA_shl_four_reg_1402) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_10_fu_514_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_514_p4[ap_tvar_int_0] = DNA_shl_four_reg_1402[127 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (DNA_shl_five_reg_1408) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_11_fu_546_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_546_p4[ap_tvar_int_1] = DNA_shl_five_reg_1408[127 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (DNA_shr_one_reg_1414) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_12_fu_578_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_12_fu_578_p4[ap_tvar_int_2] = DNA_shr_one_reg_1414[127 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (DNA_shr_two_reg_1420) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 127 - 0) begin
            tmp_13_fu_610_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_13_fu_610_p4[ap_tvar_int_3] = DNA_shr_two_reg_1420[127 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (DNA_shr_three_reg_1426) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_14_fu_642_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_14_fu_642_p4[ap_tvar_int_4] = DNA_shr_three_reg_1426[127 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (DNA_shr_four_reg_1432) begin
    for (ap_tvar_int_5 = 128 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 127 - 0) begin
            tmp_15_fu_674_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_15_fu_674_p4[ap_tvar_int_5] = DNA_shr_four_reg_1432[127 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (DNA_shr_five_reg_1438) begin
    for (ap_tvar_int_6 = 128 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 127 - 0) begin
            tmp_16_fu_706_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_16_fu_706_p4[ap_tvar_int_6] = DNA_shr_five_reg_1438[127 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (DNA_shl_one_reg_1384) begin
    for (ap_tvar_int_7 = 128 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 127 - 0) begin
            tmp_7_fu_418_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_7_fu_418_p4[ap_tvar_int_7] = DNA_shl_one_reg_1384[127 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (DNA_shl_two_reg_1390) begin
    for (ap_tvar_int_8 = 128 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 127 - 0) begin
            tmp_8_fu_450_p4[ap_tvar_int_8] = 1'b0;
        end else begin
            tmp_8_fu_450_p4[ap_tvar_int_8] = DNA_shl_two_reg_1390[127 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (DNA_shl_three_reg_1396) begin
    for (ap_tvar_int_9 = 128 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 127 - 0) begin
            tmp_9_fu_482_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            tmp_9_fu_482_p4[ap_tvar_int_9] = DNA_shl_three_reg_1396[127 - ap_tvar_int_9];
        end
    end
end

integer ap_tvar_int_10;

always @ (DNA_nsh_reg_1378) begin
    for (ap_tvar_int_10 = 128 - 1; ap_tvar_int_10 >= 0; ap_tvar_int_10 = ap_tvar_int_10 - 1) begin
        if (ap_tvar_int_10 > 127 - 0) begin
            tmp_fu_360_p4[ap_tvar_int_10] = 1'b0;
        end else begin
            tmp_fu_360_p4[ap_tvar_int_10] = DNA_nsh_reg_1378[127 - ap_tvar_int_10];
        end
    end
end

assign trunc_ln658_fu_1060_p1 = max_16_fu_1052_p3[1:0];

assign trunc_ln710_fu_400_p1 = lshr_ln710_fu_394_p2[7:0];

assign trunc_ln711_1_fu_472_p1 = lshr_ln711_1_fu_466_p2[7:0];

assign trunc_ln711_2_fu_504_p1 = lshr_ln711_2_fu_498_p2[7:0];

assign trunc_ln711_3_fu_536_p1 = lshr_ln711_3_fu_530_p2[7:0];

assign trunc_ln711_4_fu_568_p1 = lshr_ln711_4_fu_562_p2[7:0];

assign trunc_ln711_fu_440_p1 = lshr_ln711_fu_434_p2[7:0];

assign trunc_ln712_1_fu_632_p1 = lshr_ln712_1_fu_626_p2[7:0];

assign trunc_ln712_2_fu_664_p1 = lshr_ln712_2_fu_658_p2[7:0];

assign trunc_ln712_3_fu_696_p1 = lshr_ln712_3_fu_690_p2[7:0];

assign trunc_ln712_4_fu_728_p1 = lshr_ln712_4_fu_722_p2[7:0];

assign trunc_ln712_fu_600_p1 = lshr_ln712_fu_594_p2[7:0];

assign xor_ln710_fu_369_p2 = (shl_ln_fu_346_p3 ^ 7'd127);

assign zext_ln710_fu_390_p1 = select_ln710_1_fu_382_p3;

endmodule //SneakySnake_bit
