-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SneakySnake_bit is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SneakySnake_bit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SneakySnake_bit_SneakySnake_bit,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.388000,HLS_SYN_LAT=207,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7317,HLS_SYN_LUT=15711,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ReadLength : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadSeq : STD_LOGIC_VECTOR (255 downto 0);
    signal RefSeq : STD_LOGIC_VECTOR (255 downto 0);
    signal EditThreshold : STD_LOGIC_VECTOR (31 downto 0);
    signal KmerSize : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64033_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_019_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadSeq_read_reg_1368 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal RefSeq_read_reg_1373 : STD_LOGIC_VECTOR (255 downto 0);
    signal DNA_nsh_reg_1378 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_NeighborhoodMap_bit_fu_206_ap_done : STD_LOGIC;
    signal DNA_shl_one_reg_1384 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_two_reg_1390 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_three_reg_1396 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_four_reg_1402 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_five_reg_1408 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_one_reg_1414 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_two_reg_1420 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_three_reg_1426 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_four_reg_1432 : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_five_reg_1438 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln706_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_reg_1444 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal DNA_shr_two_1_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_two_1_reg_1448 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_three_1_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_three_1_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_four_1_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_four_1_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_five_1_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_five_1_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln707_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln707_reg_1468 : STD_LOGIC_VECTOR (0 downto 0);
    signal global_count_2_fu_815_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal global_count_2_reg_1472 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_val2138_i24_load_reg_1477 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2036_i25_load_reg_1482 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1934_i26_load_reg_1487 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1832_i27_load_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1730_i28_load_reg_1497 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1628_i29_load_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val26_i30_load_reg_1507 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_8_count_one_bit_fu_244_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_8_reg_1512 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_11001_ignoreCallOp175 : BOOLEAN;
    signal max_7_fu_932_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_7_reg_1518 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln706_fu_940_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln706_reg_1524 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln640_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln640_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal p_val2546_i20_load_reg_1534 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2444_i21_load_reg_1539 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2342_i22_load_reg_1544 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2240_i23_load_reg_1549 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16_fu_1052_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_16_reg_1554 : STD_LOGIC_VECTOR (3 downto 0);
    signal global_count_fu_1138_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal global_count_reg_1562 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal grp_NeighborhoodMap_bit_fu_206_ap_start : STD_LOGIC;
    signal grp_NeighborhoodMap_bit_fu_206_ap_idle : STD_LOGIC;
    signal grp_NeighborhoodMap_bit_fu_206_ap_ready : STD_LOGIC;
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_4 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_5 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_6 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_7 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_8 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_9 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_return_10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_count_one_bit_fu_214_ap_ready : STD_LOGIC;
    signal grp_count_one_bit_fu_214_input_seq_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_count_one_bit_fu_214_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_count_one_bit_fu_219_ap_ready : STD_LOGIC;
    signal grp_count_one_bit_fu_219_input_seq_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_count_one_bit_fu_219_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_count_one_bit_fu_224_ap_ready : STD_LOGIC;
    signal grp_count_one_bit_fu_224_input_seq_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_count_one_bit_fu_224_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_count_one_bit_fu_229_ap_ready : STD_LOGIC;
    signal grp_count_one_bit_fu_229_input_seq_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_count_one_bit_fu_229_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_5_count_one_bit_fu_234_ap_ready : STD_LOGIC;
    signal max_5_count_one_bit_fu_234_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i_count_one_bit_fu_239_ap_ready : STD_LOGIC;
    signal tmp_1_i_count_one_bit_fu_239_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_8_count_one_bit_fu_244_ap_ready : STD_LOGIC;
    signal ap_phi_mux_icmp_ln64033_phi_fu_186_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_first_iter_019_phi_fu_198_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_NeighborhoodMap_bit_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call39 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp169 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp196 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp170 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp197 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp171 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp198 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp172 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp199 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp173 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp174 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp175 : BOOLEAN;
    signal indvar_flatten14_fu_98 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln707_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i15_fu_102 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_2_fu_338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal global_count16_fu_106 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal global_count_21218_fu_110 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal iter31_fu_114 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal iter_fu_954_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal global_count_332_fu_118 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal global_count_3_fu_1070_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_134_fu_122 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_779_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_val2546_i20_fu_126 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln673_fu_1215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2444_i21_fu_130 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln672_fu_1207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2342_i22_fu_134 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln671_fu_1199_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2240_i23_fu_138 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln670_fu_1191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2138_i24_fu_142 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln669_fu_1133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_one_1_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2036_i25_fu_146 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln668_fu_1124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_five_1_fu_572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1934_i26_fu_150 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln667_fu_1115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_four_1_fu_540_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1832_i27_fu_154 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln666_fu_1106_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_three_1_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1730_i28_fu_158 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln665_fu_1097_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_two_1_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1628_i29_fu_162 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln664_fu_1088_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_one_1_fu_444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val26_i30_fu_166 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln663_fu_1079_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_nsh_1_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_346_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln710_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_360_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln710_fu_369_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln710_1_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln710_fu_375_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln710_fu_390_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln710_fu_394_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln710_fu_400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln710_2_fu_404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_418_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_fu_427_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_fu_434_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_450_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_1_fu_459_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_1_fu_466_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_1_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_482_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_2_fu_491_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_2_fu_498_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_2_fu_504_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_514_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_3_fu_523_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_3_fu_530_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_3_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_546_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_4_fu_555_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_4_fu_562_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_4_fu_568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_578_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_fu_587_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_fu_594_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_610_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_1_fu_619_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_1_fu_626_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_1_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_642_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_2_fu_651_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_2_fu_658_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_2_fu_664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_674_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_3_fu_683_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_3_fu_690_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_3_fu_696_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_706_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_4_fu_715_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_4_fu_722_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_4_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln318_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_1_fu_876_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_3_fu_890_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_2_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_904_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_3_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_6_fu_918_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_4_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln640_fu_948_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln318_5_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_9_fu_998_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_6_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_10_fu_1010_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_7_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_13_fu_1024_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_8_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_14_fu_1038_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_9_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln658_fu_1060_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln658_fu_1064_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_16cast_fu_1075_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast161_fu_1084_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast162_fu_1093_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast163_fu_1102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast164_fu_1111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast165_fu_1120_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast166_fu_1129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast167_fu_1188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast168_fu_1196_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast169_fu_1204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast170_fu_1212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SneakySnake_bit_NeighborhoodMap_bit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        DNA_read_val : IN STD_LOGIC_VECTOR (255 downto 0);
        DNA_ref_val : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component SneakySnake_bit_count_one_bit IS
    port (
        ap_ready : OUT STD_LOGIC;
        input_seq_val : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component SneakySnake_bit_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ReadLength : OUT STD_LOGIC_VECTOR (31 downto 0);
        ReadSeq : OUT STD_LOGIC_VECTOR (255 downto 0);
        RefSeq : OUT STD_LOGIC_VECTOR (255 downto 0);
        EditThreshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        KmerSize : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_NeighborhoodMap_bit_fu_206 : component SneakySnake_bit_NeighborhoodMap_bit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_NeighborhoodMap_bit_fu_206_ap_start,
        ap_done => grp_NeighborhoodMap_bit_fu_206_ap_done,
        ap_idle => grp_NeighborhoodMap_bit_fu_206_ap_idle,
        ap_ready => grp_NeighborhoodMap_bit_fu_206_ap_ready,
        DNA_read_val => ReadSeq_read_reg_1368,
        DNA_ref_val => RefSeq_read_reg_1373,
        ap_return_0 => grp_NeighborhoodMap_bit_fu_206_ap_return_0,
        ap_return_1 => grp_NeighborhoodMap_bit_fu_206_ap_return_1,
        ap_return_2 => grp_NeighborhoodMap_bit_fu_206_ap_return_2,
        ap_return_3 => grp_NeighborhoodMap_bit_fu_206_ap_return_3,
        ap_return_4 => grp_NeighborhoodMap_bit_fu_206_ap_return_4,
        ap_return_5 => grp_NeighborhoodMap_bit_fu_206_ap_return_5,
        ap_return_6 => grp_NeighborhoodMap_bit_fu_206_ap_return_6,
        ap_return_7 => grp_NeighborhoodMap_bit_fu_206_ap_return_7,
        ap_return_8 => grp_NeighborhoodMap_bit_fu_206_ap_return_8,
        ap_return_9 => grp_NeighborhoodMap_bit_fu_206_ap_return_9,
        ap_return_10 => grp_NeighborhoodMap_bit_fu_206_ap_return_10);

    grp_count_one_bit_fu_214 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => grp_count_one_bit_fu_214_ap_ready,
        input_seq_val => grp_count_one_bit_fu_214_input_seq_val,
        ap_return => grp_count_one_bit_fu_214_ap_return,
        ap_rst => ap_rst_n_inv);

    grp_count_one_bit_fu_219 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => grp_count_one_bit_fu_219_ap_ready,
        input_seq_val => grp_count_one_bit_fu_219_input_seq_val,
        ap_return => grp_count_one_bit_fu_219_ap_return,
        ap_rst => ap_rst_n_inv);

    grp_count_one_bit_fu_224 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => grp_count_one_bit_fu_224_ap_ready,
        input_seq_val => grp_count_one_bit_fu_224_input_seq_val,
        ap_return => grp_count_one_bit_fu_224_ap_return,
        ap_rst => ap_rst_n_inv);

    grp_count_one_bit_fu_229 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => grp_count_one_bit_fu_229_ap_ready,
        input_seq_val => grp_count_one_bit_fu_229_input_seq_val,
        ap_return => grp_count_one_bit_fu_229_ap_return,
        ap_rst => ap_rst_n_inv);

    max_5_count_one_bit_fu_234 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_5_count_one_bit_fu_234_ap_ready,
        input_seq_val => p_val1934_i26_fu_150,
        ap_return => max_5_count_one_bit_fu_234_ap_return,
        ap_rst => ap_rst_n_inv);

    tmp_1_i_count_one_bit_fu_239 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_1_i_count_one_bit_fu_239_ap_ready,
        input_seq_val => p_val2036_i25_fu_146,
        ap_return => tmp_1_i_count_one_bit_fu_239_ap_return,
        ap_rst => ap_rst_n_inv);

    max_8_count_one_bit_fu_244 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_8_count_one_bit_fu_244_ap_ready,
        input_seq_val => p_val2138_i24_fu_142,
        ap_return => max_8_count_one_bit_fu_244_ap_return,
        ap_rst => ap_rst_n_inv);

    control_s_axi_U : component SneakySnake_bit_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ReadLength => ReadLength,
        ReadSeq => ReadSeq,
        RefSeq => RefSeq,
        EditThreshold => EditThreshold,
        KmerSize => KmerSize);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_NeighborhoodMap_bit_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1_ignore_call39) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_NeighborhoodMap_bit_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_NeighborhoodMap_bit_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    first_iter_019_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1468 = ap_const_lv1_0))) then 
                first_iter_019_reg_194 <= ap_const_lv1_0;
            elsif (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                first_iter_019_reg_194 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    global_count16_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                global_count16_fu_106 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                global_count16_fu_106 <= global_count_2_fu_815_p3;
            end if; 
        end if;
    end process;

    global_count_332_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                global_count_332_fu_118 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                global_count_332_fu_118 <= global_count_3_fu_1070_p2;
            end if; 
        end if;
    end process;

    i15_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i15_fu_102 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i15_fu_102 <= i_2_fu_338_p3;
            end if; 
        end if;
    end process;

    i_134_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_134_fu_122 <= ap_const_lv4_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_134_fu_122 <= i_fu_779_p2;
            end if; 
        end if;
    end process;

    icmp_ln64033_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1468 = ap_const_lv1_0))) then 
                icmp_ln64033_reg_182 <= icmp_ln640_reg_1529;
            elsif (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                icmp_ln64033_reg_182 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten14_fu_98 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten14_fu_98 <= add_ln707_fu_738_p2;
            end if; 
        end if;
    end process;

    iter31_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iter31_fu_114 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                iter31_fu_114 <= iter_fu_954_p3;
            end if; 
        end if;
    end process;

    p_val1628_i29_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val1628_i29_fu_162 <= DNA_shl_one_1_fu_444_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val1628_i29_fu_162 <= shl_ln664_fu_1088_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1730_i28_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val1730_i28_fu_158 <= DNA_shl_two_1_fu_476_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val1730_i28_fu_158 <= shl_ln665_fu_1097_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1832_i27_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val1832_i27_fu_154 <= DNA_shl_three_1_fu_508_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val1832_i27_fu_154 <= shl_ln666_fu_1106_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1934_i26_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val1934_i26_fu_150 <= DNA_shl_four_1_fu_540_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val1934_i26_fu_150 <= shl_ln667_fu_1115_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2036_i25_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val2036_i25_fu_146 <= DNA_shl_five_1_fu_572_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2036_i25_fu_146 <= shl_ln668_fu_1124_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2138_i24_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val2138_i24_fu_142 <= DNA_shr_one_1_fu_604_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2138_i24_fu_142 <= shl_ln669_fu_1133_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2240_i23_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                if (((or_ln706_reg_1444 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                    p_val2240_i23_fu_138 <= DNA_shr_two_1_reg_1448;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2240_i23_fu_138 <= shl_ln670_fu_1191_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2342_i22_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                if (((or_ln706_reg_1444 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                    p_val2342_i22_fu_134 <= DNA_shr_three_1_reg_1453;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2342_i22_fu_134 <= shl_ln671_fu_1199_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2444_i21_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                if (((or_ln706_reg_1444 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                    p_val2444_i21_fu_130 <= DNA_shr_four_1_reg_1458;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2444_i21_fu_130 <= shl_ln672_fu_1207_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2546_i20_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                if (((or_ln706_reg_1444 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                    p_val2546_i20_fu_126 <= DNA_shr_five_1_reg_1463;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val2546_i20_fu_126 <= shl_ln673_fu_1215_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val26_i30_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((or_ln706_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_val26_i30_fu_166 <= DNA_nsh_1_fu_412_p2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_val26_i30_fu_166 <= shl_ln663_fu_1079_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                DNA_nsh_reg_1378 <= grp_NeighborhoodMap_bit_fu_206_ap_return_0;
                DNA_shl_five_reg_1408 <= grp_NeighborhoodMap_bit_fu_206_ap_return_5;
                DNA_shl_four_reg_1402 <= grp_NeighborhoodMap_bit_fu_206_ap_return_4;
                DNA_shl_one_reg_1384 <= grp_NeighborhoodMap_bit_fu_206_ap_return_1;
                DNA_shl_three_reg_1396 <= grp_NeighborhoodMap_bit_fu_206_ap_return_3;
                DNA_shl_two_reg_1390 <= grp_NeighborhoodMap_bit_fu_206_ap_return_2;
                DNA_shr_five_reg_1438 <= grp_NeighborhoodMap_bit_fu_206_ap_return_10;
                DNA_shr_four_reg_1432 <= grp_NeighborhoodMap_bit_fu_206_ap_return_9;
                DNA_shr_one_reg_1414 <= grp_NeighborhoodMap_bit_fu_206_ap_return_6;
                DNA_shr_three_reg_1426 <= grp_NeighborhoodMap_bit_fu_206_ap_return_8;
                DNA_shr_two_reg_1420 <= grp_NeighborhoodMap_bit_fu_206_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DNA_shr_five_1_reg_1463 <= DNA_shr_five_1_fu_732_p2;
                DNA_shr_four_1_reg_1458 <= DNA_shr_four_1_fu_700_p2;
                DNA_shr_three_1_reg_1453 <= DNA_shr_three_1_fu_668_p2;
                DNA_shr_two_1_reg_1448 <= DNA_shr_two_1_fu_636_p2;
                icmp_ln707_reg_1468 <= icmp_ln707_fu_785_p2;
                max_16_reg_1554 <= max_16_fu_1052_p3;
                or_ln706_reg_1444 <= or_ln706_fu_332_p2;
                p_val2240_i23_load_reg_1549 <= p_val2240_i23_fu_138;
                p_val2342_i22_load_reg_1544 <= p_val2342_i22_fu_134;
                p_val2444_i21_load_reg_1539 <= p_val2444_i21_fu_130;
                p_val2546_i20_load_reg_1534 <= p_val2546_i20_fu_126;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ReadSeq_read_reg_1368 <= ReadSeq;
                RefSeq_read_reg_1373 <= RefSeq;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                global_count_21218_fu_110 <= global_count_fu_1138_p2;
                global_count_reg_1562 <= global_count_fu_1138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                global_count_2_reg_1472 <= global_count_2_fu_815_p3;
                max_7_reg_1518 <= max_7_fu_932_p3;
                p_val1628_i29_load_reg_1502 <= p_val1628_i29_fu_162;
                p_val1730_i28_load_reg_1497 <= p_val1730_i28_fu_158;
                p_val1832_i27_load_reg_1492 <= p_val1832_i27_fu_154;
                p_val1934_i26_load_reg_1487 <= p_val1934_i26_fu_150;
                p_val2036_i25_load_reg_1482 <= p_val2036_i25_fu_146;
                p_val2138_i24_load_reg_1477 <= p_val2138_i24_fu_142;
                p_val26_i30_load_reg_1507 <= p_val26_i30_fu_166;
                select_ln706_reg_1524 <= select_ln706_fu_940_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                icmp_ln640_reg_1529 <= icmp_ln640_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp175) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                max_8_reg_1512 <= max_8_count_one_bit_fu_244_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state2, grp_NeighborhoodMap_bit_fu_206_ap_done, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    DNA_nsh_1_fu_412_p2 <= (trunc_ln710_fu_400_p1 and select_ln710_2_fu_404_p3);
    DNA_shl_five_1_fu_572_p2 <= (trunc_ln711_4_fu_568_p1 and select_ln710_2_fu_404_p3);
    DNA_shl_four_1_fu_540_p2 <= (trunc_ln711_3_fu_536_p1 and select_ln710_2_fu_404_p3);
    DNA_shl_one_1_fu_444_p2 <= (trunc_ln711_fu_440_p1 and select_ln710_2_fu_404_p3);
    DNA_shl_three_1_fu_508_p2 <= (trunc_ln711_2_fu_504_p1 and select_ln710_2_fu_404_p3);
    DNA_shl_two_1_fu_476_p2 <= (trunc_ln711_1_fu_472_p1 and select_ln710_2_fu_404_p3);
    DNA_shr_five_1_fu_732_p2 <= (trunc_ln712_4_fu_728_p1 and select_ln710_2_fu_404_p3);
    DNA_shr_four_1_fu_700_p2 <= (trunc_ln712_3_fu_696_p1 and select_ln710_2_fu_404_p3);
    DNA_shr_one_1_fu_604_p2 <= (trunc_ln712_fu_600_p1 and select_ln710_2_fu_404_p3);
    DNA_shr_three_1_fu_668_p2 <= (trunc_ln712_2_fu_664_p1 and select_ln710_2_fu_404_p3);
    DNA_shr_two_1_fu_636_p2 <= (trunc_ln712_1_fu_632_p1 and select_ln710_2_fu_404_p3);
    add_ln640_fu_948_p2 <= std_logic_vector(unsigned(iter31_fu_114) + unsigned(ap_const_lv2_1));
    add_ln658_fu_1064_p2 <= std_logic_vector(unsigned(trunc_ln658_fu_1060_p1) + unsigned(ap_const_lv2_1));
    add_ln707_fu_738_p2 <= std_logic_vector(unsigned(indvar_flatten14_fu_98) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_NeighborhoodMap_bit_fu_206_ap_done)
    begin
        if ((grp_NeighborhoodMap_bit_fu_206_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp196 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp197 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp198 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp199 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp175 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp169 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp170 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp171 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp172 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp173 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp174 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp175 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call39_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call39 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln707_reg_1468, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln707_reg_1468 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_first_iter_019_phi_fu_198_p4_assign_proc : process(first_iter_019_reg_194, ap_CS_fsm_pp0_stage0, icmp_ln707_reg_1468, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1468 = ap_const_lv1_0))) then 
            ap_phi_mux_first_iter_019_phi_fu_198_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_019_phi_fu_198_p4 <= first_iter_019_reg_194;
        end if; 
    end process;


    ap_phi_mux_icmp_ln64033_phi_fu_186_p4_assign_proc : process(icmp_ln64033_reg_182, ap_CS_fsm_pp0_stage0, icmp_ln707_reg_1468, icmp_ln640_reg_1529, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1468 = ap_const_lv1_0))) then 
            ap_phi_mux_icmp_ln64033_phi_fu_186_p4 <= icmp_ln640_reg_1529;
        else 
            ap_phi_mux_icmp_ln64033_phi_fu_186_p4 <= icmp_ln64033_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(global_count_reg_1562),32));
    global_count_2_fu_815_p3 <= 
        global_count_21218_fu_110 when (icmp_ln64033_reg_182(0) = '1') else 
        global_count16_fu_106;
    global_count_3_fu_1070_p2 <= std_logic_vector(unsigned(select_ln706_reg_1524) + unsigned(add_ln658_fu_1064_p2));
    global_count_fu_1138_p2 <= std_logic_vector(unsigned(global_count_3_fu_1070_p2) + unsigned(global_count_2_reg_1472));
    grp_NeighborhoodMap_bit_fu_206_ap_start <= grp_NeighborhoodMap_bit_fu_206_ap_start_reg;

    grp_count_one_bit_fu_214_input_seq_val_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_ignoreCallOp169, ap_block_pp0_stage0_ignoreCallOp196, p_val2240_i23_fu_138, p_val26_i30_fu_166)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_ignoreCallOp196) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_count_one_bit_fu_214_input_seq_val <= p_val2240_i23_fu_138;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_ignoreCallOp169) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            grp_count_one_bit_fu_214_input_seq_val <= p_val26_i30_fu_166;
        else 
            grp_count_one_bit_fu_214_input_seq_val <= "XXXXXXXX";
        end if; 
    end process;


    grp_count_one_bit_fu_219_input_seq_val_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_ignoreCallOp170, ap_block_pp0_stage0_ignoreCallOp197, p_val2342_i22_fu_134, p_val1628_i29_fu_162)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_ignoreCallOp197) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_count_one_bit_fu_219_input_seq_val <= p_val2342_i22_fu_134;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_ignoreCallOp170) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            grp_count_one_bit_fu_219_input_seq_val <= p_val1628_i29_fu_162;
        else 
            grp_count_one_bit_fu_219_input_seq_val <= "XXXXXXXX";
        end if; 
    end process;


    grp_count_one_bit_fu_224_input_seq_val_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_ignoreCallOp171, ap_block_pp0_stage0_ignoreCallOp198, p_val2444_i21_fu_130, p_val1730_i28_fu_158)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_ignoreCallOp198) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_count_one_bit_fu_224_input_seq_val <= p_val2444_i21_fu_130;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_ignoreCallOp171) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            grp_count_one_bit_fu_224_input_seq_val <= p_val1730_i28_fu_158;
        else 
            grp_count_one_bit_fu_224_input_seq_val <= "XXXXXXXX";
        end if; 
    end process;


    grp_count_one_bit_fu_229_input_seq_val_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_ignoreCallOp172, ap_block_pp0_stage0_ignoreCallOp199, p_val2546_i20_fu_126, p_val1832_i27_fu_154)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_ignoreCallOp199) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_count_one_bit_fu_229_input_seq_val <= p_val2546_i20_fu_126;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_ignoreCallOp172) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            grp_count_one_bit_fu_229_input_seq_val <= p_val1832_i27_fu_154;
        else 
            grp_count_one_bit_fu_229_input_seq_val <= "XXXXXXXX";
        end if; 
    end process;

    i_2_fu_338_p3 <= 
        i_134_fu_122 when (ap_phi_mux_icmp_ln64033_phi_fu_186_p4(0) = '1') else 
        i15_fu_102;
    i_fu_779_p2 <= std_logic_vector(unsigned(i_2_fu_338_p3) + unsigned(ap_const_lv4_1));
    icmp_ln318_1_fu_884_p2 <= "1" when (unsigned(grp_count_one_bit_fu_224_ap_return) > unsigned(max_1_fu_876_p3)) else "0";
    icmp_ln318_2_fu_898_p2 <= "1" when (unsigned(grp_count_one_bit_fu_229_ap_return) > unsigned(max_3_fu_890_p3)) else "0";
    icmp_ln318_3_fu_912_p2 <= "1" when (unsigned(max_5_count_one_bit_fu_234_ap_return) > unsigned(max_4_fu_904_p3)) else "0";
    icmp_ln318_4_fu_926_p2 <= "1" when (unsigned(tmp_1_i_count_one_bit_fu_239_ap_return) > unsigned(max_6_fu_918_p3)) else "0";
    icmp_ln318_5_fu_994_p2 <= "1" when (unsigned(max_8_reg_1512) > unsigned(max_7_reg_1518)) else "0";
    icmp_ln318_6_fu_1004_p2 <= "1" when (unsigned(grp_count_one_bit_fu_214_ap_return) > unsigned(max_9_fu_998_p3)) else "0";
    icmp_ln318_7_fu_1018_p2 <= "1" when (unsigned(grp_count_one_bit_fu_219_ap_return) > unsigned(max_10_fu_1010_p3)) else "0";
    icmp_ln318_8_fu_1032_p2 <= "1" when (unsigned(grp_count_one_bit_fu_224_ap_return) > unsigned(max_13_fu_1024_p3)) else "0";
    icmp_ln318_9_fu_1046_p2 <= "1" when (unsigned(grp_count_one_bit_fu_229_ap_return) > unsigned(max_14_fu_1038_p3)) else "0";
    icmp_ln318_fu_870_p2 <= "1" when (unsigned(grp_count_one_bit_fu_219_ap_return) > unsigned(grp_count_one_bit_fu_214_ap_return)) else "0";
    icmp_ln640_fu_962_p2 <= "1" when (iter_fu_954_p3 = ap_const_lv2_3) else "0";
    icmp_ln707_fu_785_p2 <= "1" when (indvar_flatten14_fu_98 = ap_const_lv6_23) else "0";
    icmp_ln710_fu_354_p2 <= "0" when (shl_ln_fu_346_p3 = ap_const_lv7_0) else "1";
    iter_fu_954_p3 <= 
        ap_const_lv2_1 when (icmp_ln64033_reg_182(0) = '1') else 
        add_ln640_fu_948_p2;
    lshr_ln710_fu_394_p2 <= std_logic_vector(shift_right(unsigned(select_ln710_fu_375_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln711_1_fu_466_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_1_fu_459_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln711_2_fu_498_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_2_fu_491_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln711_3_fu_530_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_3_fu_523_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln711_4_fu_562_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_4_fu_555_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln711_fu_434_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_fu_427_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln712_1_fu_626_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_1_fu_619_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln712_2_fu_658_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_2_fu_651_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln712_3_fu_690_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_3_fu_683_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln712_4_fu_722_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_4_fu_715_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    lshr_ln712_fu_594_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_fu_587_p3),to_integer(unsigned('0' & zext_ln710_fu_390_p1(31-1 downto 0)))));
    max_10_fu_1010_p3 <= 
        grp_count_one_bit_fu_214_ap_return when (icmp_ln318_6_fu_1004_p2(0) = '1') else 
        max_9_fu_998_p3;
    max_13_fu_1024_p3 <= 
        grp_count_one_bit_fu_219_ap_return when (icmp_ln318_7_fu_1018_p2(0) = '1') else 
        max_10_fu_1010_p3;
    max_14_fu_1038_p3 <= 
        grp_count_one_bit_fu_224_ap_return when (icmp_ln318_8_fu_1032_p2(0) = '1') else 
        max_13_fu_1024_p3;
    max_16_fu_1052_p3 <= 
        grp_count_one_bit_fu_229_ap_return when (icmp_ln318_9_fu_1046_p2(0) = '1') else 
        max_14_fu_1038_p3;
    max_16cast161_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast162_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast163_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast164_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast165_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast166_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_16cast167_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_reg_1554),8));
    max_16cast168_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_reg_1554),8));
    max_16cast169_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_reg_1554),8));
    max_16cast170_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_reg_1554),8));
    max_16cast_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1052_p3),8));
    max_1_fu_876_p3 <= 
        grp_count_one_bit_fu_219_ap_return when (icmp_ln318_fu_870_p2(0) = '1') else 
        grp_count_one_bit_fu_214_ap_return;
    max_3_fu_890_p3 <= 
        grp_count_one_bit_fu_224_ap_return when (icmp_ln318_1_fu_884_p2(0) = '1') else 
        max_1_fu_876_p3;
    max_4_fu_904_p3 <= 
        grp_count_one_bit_fu_229_ap_return when (icmp_ln318_2_fu_898_p2(0) = '1') else 
        max_3_fu_890_p3;
    max_6_fu_918_p3 <= 
        max_5_count_one_bit_fu_234_ap_return when (icmp_ln318_3_fu_912_p2(0) = '1') else 
        max_4_fu_904_p3;
    max_7_fu_932_p3 <= 
        tmp_1_i_count_one_bit_fu_239_ap_return when (icmp_ln318_4_fu_926_p2(0) = '1') else 
        max_6_fu_918_p3;
    max_9_fu_998_p3 <= 
        max_8_reg_1512 when (icmp_ln318_5_fu_994_p2(0) = '1') else 
        max_7_reg_1518;
    or_ln706_fu_332_p2 <= (ap_phi_mux_icmp_ln64033_phi_fu_186_p4 or ap_phi_mux_first_iter_019_phi_fu_198_p4);
    select_ln706_fu_940_p3 <= 
        ap_const_lv2_0 when (icmp_ln64033_reg_182(0) = '1') else 
        global_count_332_fu_118;
    select_ln710_1_fu_382_p3 <= 
        xor_ln710_fu_369_p2 when (icmp_ln710_fu_354_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln710_2_fu_404_p3 <= 
        ap_const_lv8_3 when (icmp_ln710_fu_354_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln710_fu_375_p3 <= 
        tmp_fu_360_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_nsh_reg_1378;
    select_ln711_1_fu_459_p3 <= 
        tmp_8_fu_450_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shl_two_reg_1390;
    select_ln711_2_fu_491_p3 <= 
        tmp_9_fu_482_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shl_three_reg_1396;
    select_ln711_3_fu_523_p3 <= 
        tmp_10_fu_514_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shl_four_reg_1402;
    select_ln711_4_fu_555_p3 <= 
        tmp_11_fu_546_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shl_five_reg_1408;
    select_ln711_fu_427_p3 <= 
        tmp_7_fu_418_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shl_one_reg_1384;
    select_ln712_1_fu_619_p3 <= 
        tmp_13_fu_610_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shr_two_reg_1420;
    select_ln712_2_fu_651_p3 <= 
        tmp_14_fu_642_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shr_three_reg_1426;
    select_ln712_3_fu_683_p3 <= 
        tmp_15_fu_674_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shr_four_reg_1432;
    select_ln712_4_fu_715_p3 <= 
        tmp_16_fu_706_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shr_five_reg_1438;
    select_ln712_fu_587_p3 <= 
        tmp_12_fu_578_p4 when (icmp_ln710_fu_354_p2(0) = '1') else 
        DNA_shr_one_reg_1414;
    shl_ln663_fu_1079_p2 <= std_logic_vector(shift_left(unsigned(p_val26_i30_load_reg_1507),to_integer(unsigned('0' & max_16cast_fu_1075_p1(8-1 downto 0)))));
    shl_ln664_fu_1088_p2 <= std_logic_vector(shift_left(unsigned(p_val1628_i29_load_reg_1502),to_integer(unsigned('0' & max_16cast161_fu_1084_p1(8-1 downto 0)))));
    shl_ln665_fu_1097_p2 <= std_logic_vector(shift_left(unsigned(p_val1730_i28_load_reg_1497),to_integer(unsigned('0' & max_16cast162_fu_1093_p1(8-1 downto 0)))));
    shl_ln666_fu_1106_p2 <= std_logic_vector(shift_left(unsigned(p_val1832_i27_load_reg_1492),to_integer(unsigned('0' & max_16cast163_fu_1102_p1(8-1 downto 0)))));
    shl_ln667_fu_1115_p2 <= std_logic_vector(shift_left(unsigned(p_val1934_i26_load_reg_1487),to_integer(unsigned('0' & max_16cast164_fu_1111_p1(8-1 downto 0)))));
    shl_ln668_fu_1124_p2 <= std_logic_vector(shift_left(unsigned(p_val2036_i25_load_reg_1482),to_integer(unsigned('0' & max_16cast165_fu_1120_p1(8-1 downto 0)))));
    shl_ln669_fu_1133_p2 <= std_logic_vector(shift_left(unsigned(p_val2138_i24_load_reg_1477),to_integer(unsigned('0' & max_16cast166_fu_1129_p1(8-1 downto 0)))));
    shl_ln670_fu_1191_p2 <= std_logic_vector(shift_left(unsigned(p_val2240_i23_load_reg_1549),to_integer(unsigned('0' & max_16cast167_fu_1188_p1(8-1 downto 0)))));
    shl_ln671_fu_1199_p2 <= std_logic_vector(shift_left(unsigned(p_val2342_i22_load_reg_1544),to_integer(unsigned('0' & max_16cast168_fu_1196_p1(8-1 downto 0)))));
    shl_ln672_fu_1207_p2 <= std_logic_vector(shift_left(unsigned(p_val2444_i21_load_reg_1539),to_integer(unsigned('0' & max_16cast169_fu_1204_p1(8-1 downto 0)))));
    shl_ln673_fu_1215_p2 <= std_logic_vector(shift_left(unsigned(p_val2546_i20_load_reg_1534),to_integer(unsigned('0' & max_16cast170_fu_1212_p1(8-1 downto 0)))));
    shl_ln_fu_346_p3 <= (i_2_fu_338_p3 & ap_const_lv3_0);
    
    tmp_10_fu_514_p4_proc : process(DNA_shl_four_reg_1402)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_10_fu_514_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shl_four_reg_1402;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_10_fu_514_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_10_fu_514_p4_i) := DNA_shl_four_reg_1402(128-1-tmp_10_fu_514_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_514_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_11_fu_546_p4_proc : process(DNA_shl_five_reg_1408)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_11_fu_546_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shl_five_reg_1408;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_11_fu_546_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_11_fu_546_p4_i) := DNA_shl_five_reg_1408(128-1-tmp_11_fu_546_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_546_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_12_fu_578_p4_proc : process(DNA_shr_one_reg_1414)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_12_fu_578_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shr_one_reg_1414;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_12_fu_578_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_12_fu_578_p4_i) := DNA_shr_one_reg_1414(128-1-tmp_12_fu_578_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_578_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_13_fu_610_p4_proc : process(DNA_shr_two_reg_1420)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_13_fu_610_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shr_two_reg_1420;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_13_fu_610_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_13_fu_610_p4_i) := DNA_shr_two_reg_1420(128-1-tmp_13_fu_610_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_610_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_14_fu_642_p4_proc : process(DNA_shr_three_reg_1426)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_14_fu_642_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shr_three_reg_1426;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_14_fu_642_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_14_fu_642_p4_i) := DNA_shr_three_reg_1426(128-1-tmp_14_fu_642_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_642_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_15_fu_674_p4_proc : process(DNA_shr_four_reg_1432)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_15_fu_674_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shr_four_reg_1432;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_15_fu_674_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_15_fu_674_p4_i) := DNA_shr_four_reg_1432(128-1-tmp_15_fu_674_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_674_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_16_fu_706_p4_proc : process(DNA_shr_five_reg_1438)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_16_fu_706_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shr_five_reg_1438;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_16_fu_706_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_16_fu_706_p4_i) := DNA_shr_five_reg_1438(128-1-tmp_16_fu_706_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_706_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_7_fu_418_p4_proc : process(DNA_shl_one_reg_1384)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_7_fu_418_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shl_one_reg_1384;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_7_fu_418_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_7_fu_418_p4_i) := DNA_shl_one_reg_1384(128-1-tmp_7_fu_418_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_418_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_8_fu_450_p4_proc : process(DNA_shl_two_reg_1390)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_8_fu_450_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shl_two_reg_1390;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_8_fu_450_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_8_fu_450_p4_i) := DNA_shl_two_reg_1390(128-1-tmp_8_fu_450_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_450_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_9_fu_482_p4_proc : process(DNA_shl_three_reg_1396)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_9_fu_482_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_shl_three_reg_1396;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_9_fu_482_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_9_fu_482_p4_i) := DNA_shl_three_reg_1396(128-1-tmp_9_fu_482_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_482_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_fu_360_p4_proc : process(DNA_nsh_reg_1378)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_360_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := DNA_nsh_reg_1378;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_360_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_360_p4_i) := DNA_nsh_reg_1378(128-1-tmp_fu_360_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_360_p4 <= resvalue(128-1 downto 0);
    end process;

    trunc_ln658_fu_1060_p1 <= max_16_fu_1052_p3(2 - 1 downto 0);
    trunc_ln710_fu_400_p1 <= lshr_ln710_fu_394_p2(8 - 1 downto 0);
    trunc_ln711_1_fu_472_p1 <= lshr_ln711_1_fu_466_p2(8 - 1 downto 0);
    trunc_ln711_2_fu_504_p1 <= lshr_ln711_2_fu_498_p2(8 - 1 downto 0);
    trunc_ln711_3_fu_536_p1 <= lshr_ln711_3_fu_530_p2(8 - 1 downto 0);
    trunc_ln711_4_fu_568_p1 <= lshr_ln711_4_fu_562_p2(8 - 1 downto 0);
    trunc_ln711_fu_440_p1 <= lshr_ln711_fu_434_p2(8 - 1 downto 0);
    trunc_ln712_1_fu_632_p1 <= lshr_ln712_1_fu_626_p2(8 - 1 downto 0);
    trunc_ln712_2_fu_664_p1 <= lshr_ln712_2_fu_658_p2(8 - 1 downto 0);
    trunc_ln712_3_fu_696_p1 <= lshr_ln712_3_fu_690_p2(8 - 1 downto 0);
    trunc_ln712_4_fu_728_p1 <= lshr_ln712_4_fu_722_p2(8 - 1 downto 0);
    trunc_ln712_fu_600_p1 <= lshr_ln712_fu_594_p2(8 - 1 downto 0);
    xor_ln710_fu_369_p2 <= (shl_ln_fu_346_p3 xor ap_const_lv7_7F);
    zext_ln710_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln710_1_fu_382_p3),128));
end behav;
