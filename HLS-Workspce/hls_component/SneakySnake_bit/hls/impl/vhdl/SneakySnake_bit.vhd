-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SneakySnake_bit is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SneakySnake_bit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SneakySnake_bit_SneakySnake_bit,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=11.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.478429,HLS_SYN_LAT=20,HLS_SYN_TPT=12,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5430,HLS_SYN_LUT=35740,HLS_VERSION=2024_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadLength : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadSeq : STD_LOGIC_VECTOR (255 downto 0);
    signal RefSeq : STD_LOGIC_VECTOR (255 downto 0);
    signal EditThreshold : STD_LOGIC_VECTOR (31 downto 0);
    signal KmerSize : STD_LOGIC_VECTOR (31 downto 0);
    signal NeighborhoodMap_bit_U0_ap_start : STD_LOGIC;
    signal NeighborhoodMap_bit_U0_ap_done : STD_LOGIC;
    signal NeighborhoodMap_bit_U0_ap_continue : STD_LOGIC;
    signal NeighborhoodMap_bit_U0_ap_idle : STD_LOGIC;
    signal NeighborhoodMap_bit_U0_ap_ready : STD_LOGIC;
    signal NeighborhoodMap_bit_U0_ap_return_0 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_2 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_3 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_4 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_5 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_6 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_7 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_8 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_9 : STD_LOGIC_VECTOR (127 downto 0);
    signal NeighborhoodMap_bit_U0_ap_return_10 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_channel_done_DNA_shr_five : STD_LOGIC;
    signal DNA_shr_five_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_DNA_shr_five : STD_LOGIC := '0';
    signal ap_sync_channel_write_DNA_shr_five : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VITIS_LOOP_709_1_proc_U0_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i_i2_loc_channel_full_n : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal DNA_nsh_full_n : STD_LOGIC;
    signal DNA_nsh_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_nsh_empty_n : STD_LOGIC;
    signal DNA_nsh_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_nsh_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_one_full_n : STD_LOGIC;
    signal DNA_shl_one_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_one_empty_n : STD_LOGIC;
    signal DNA_shl_one_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_one_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_two_full_n : STD_LOGIC;
    signal DNA_shl_two_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_two_empty_n : STD_LOGIC;
    signal DNA_shl_two_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_two_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_three_full_n : STD_LOGIC;
    signal DNA_shl_three_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_three_empty_n : STD_LOGIC;
    signal DNA_shl_three_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_three_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_four_full_n : STD_LOGIC;
    signal DNA_shl_four_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_four_empty_n : STD_LOGIC;
    signal DNA_shl_four_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_four_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_five_full_n : STD_LOGIC;
    signal DNA_shl_five_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shl_five_empty_n : STD_LOGIC;
    signal DNA_shl_five_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shl_five_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_one_full_n : STD_LOGIC;
    signal DNA_shr_one_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_one_empty_n : STD_LOGIC;
    signal DNA_shr_one_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_one_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_two_full_n : STD_LOGIC;
    signal DNA_shr_two_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_two_empty_n : STD_LOGIC;
    signal DNA_shr_two_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_two_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_three_full_n : STD_LOGIC;
    signal DNA_shr_three_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_three_empty_n : STD_LOGIC;
    signal DNA_shr_three_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_three_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_four_full_n : STD_LOGIC;
    signal DNA_shr_four_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_four_empty_n : STD_LOGIC;
    signal DNA_shr_four_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_four_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_five_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal DNA_shr_five_empty_n : STD_LOGIC;
    signal DNA_shr_five_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal DNA_shr_five_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal add_i_i2_loc_channel_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i_i2_loc_channel_empty_n : STD_LOGIC;
    signal add_i_i2_loc_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal add_i_i2_loc_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component SneakySnake_bit_NeighborhoodMap_bit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ReadSeq : IN STD_LOGIC_VECTOR (255 downto 0);
        RefSeq : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc IS
    port (
        ap_continue : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component SneakySnake_bit_Block_entry_proc_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component SneakySnake_bit_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component SneakySnake_bit_fifo_w2_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component SneakySnake_bit_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        ReadLength : OUT STD_LOGIC_VECTOR (31 downto 0);
        ReadSeq : OUT STD_LOGIC_VECTOR (255 downto 0);
        RefSeq : OUT STD_LOGIC_VECTOR (255 downto 0);
        EditThreshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        KmerSize : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    control_s_axi_U : component SneakySnake_bit_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_return => ap_return,
        ReadLength => ReadLength,
        ReadSeq => ReadSeq,
        RefSeq => RefSeq,
        EditThreshold => EditThreshold,
        KmerSize => KmerSize);

    NeighborhoodMap_bit_U0 : component SneakySnake_bit_NeighborhoodMap_bit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => NeighborhoodMap_bit_U0_ap_start,
        ap_done => NeighborhoodMap_bit_U0_ap_done,
        ap_continue => NeighborhoodMap_bit_U0_ap_continue,
        ap_ce => ap_const_logic_1,
        ap_idle => NeighborhoodMap_bit_U0_ap_idle,
        ap_ready => NeighborhoodMap_bit_U0_ap_ready,
        ReadSeq => ReadSeq,
        RefSeq => RefSeq,
        ap_return_0 => NeighborhoodMap_bit_U0_ap_return_0,
        ap_return_1 => NeighborhoodMap_bit_U0_ap_return_1,
        ap_return_2 => NeighborhoodMap_bit_U0_ap_return_2,
        ap_return_3 => NeighborhoodMap_bit_U0_ap_return_3,
        ap_return_4 => NeighborhoodMap_bit_U0_ap_return_4,
        ap_return_5 => NeighborhoodMap_bit_U0_ap_return_5,
        ap_return_6 => NeighborhoodMap_bit_U0_ap_return_6,
        ap_return_7 => NeighborhoodMap_bit_U0_ap_return_7,
        ap_return_8 => NeighborhoodMap_bit_U0_ap_return_8,
        ap_return_9 => NeighborhoodMap_bit_U0_ap_return_9,
        ap_return_10 => NeighborhoodMap_bit_U0_ap_return_10);

    Loop_VITIS_LOOP_709_1_proc_U0 : component SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc
    port map (
        ap_continue => Loop_VITIS_LOOP_709_1_proc_U0_ap_continue,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_VITIS_LOOP_709_1_proc_U0_ap_start,
        ap_done => Loop_VITIS_LOOP_709_1_proc_U0_ap_done,
        ap_idle => Loop_VITIS_LOOP_709_1_proc_U0_ap_idle,
        ap_ready => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        p_read => DNA_nsh_dout,
        p_read1 => DNA_shl_one_dout,
        p_read2 => DNA_shl_two_dout,
        p_read3 => DNA_shl_three_dout,
        p_read4 => DNA_shl_four_dout,
        p_read5 => DNA_shl_five_dout,
        p_read6 => DNA_shr_one_dout,
        p_read7 => DNA_shr_two_dout,
        p_read8 => DNA_shr_three_dout,
        p_read9 => DNA_shr_four_dout,
        p_read10 => DNA_shr_five_dout,
        ap_return => Loop_VITIS_LOOP_709_1_proc_U0_ap_return);

    Block_entry_proc_proc_U0 : component SneakySnake_bit_Block_entry_proc_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry_proc_proc_U0_ap_start,
        ap_done => Block_entry_proc_proc_U0_ap_done,
        ap_continue => Block_entry_proc_proc_U0_ap_continue,
        ap_idle => Block_entry_proc_proc_U0_ap_idle,
        ap_ready => Block_entry_proc_proc_U0_ap_ready,
        p_read => add_i_i2_loc_channel_dout,
        ap_return => Block_entry_proc_proc_U0_ap_return);

    DNA_nsh_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_0,
        if_full_n => DNA_nsh_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_nsh_dout,
        if_empty_n => DNA_nsh_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_nsh_num_data_valid,
        if_fifo_cap => DNA_nsh_fifo_cap);

    DNA_shl_one_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_1,
        if_full_n => DNA_shl_one_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shl_one_dout,
        if_empty_n => DNA_shl_one_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shl_one_num_data_valid,
        if_fifo_cap => DNA_shl_one_fifo_cap);

    DNA_shl_two_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_2,
        if_full_n => DNA_shl_two_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shl_two_dout,
        if_empty_n => DNA_shl_two_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shl_two_num_data_valid,
        if_fifo_cap => DNA_shl_two_fifo_cap);

    DNA_shl_three_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_3,
        if_full_n => DNA_shl_three_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shl_three_dout,
        if_empty_n => DNA_shl_three_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shl_three_num_data_valid,
        if_fifo_cap => DNA_shl_three_fifo_cap);

    DNA_shl_four_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_4,
        if_full_n => DNA_shl_four_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shl_four_dout,
        if_empty_n => DNA_shl_four_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shl_four_num_data_valid,
        if_fifo_cap => DNA_shl_four_fifo_cap);

    DNA_shl_five_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_5,
        if_full_n => DNA_shl_five_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shl_five_dout,
        if_empty_n => DNA_shl_five_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shl_five_num_data_valid,
        if_fifo_cap => DNA_shl_five_fifo_cap);

    DNA_shr_one_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_6,
        if_full_n => DNA_shr_one_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shr_one_dout,
        if_empty_n => DNA_shr_one_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shr_one_num_data_valid,
        if_fifo_cap => DNA_shr_one_fifo_cap);

    DNA_shr_two_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_7,
        if_full_n => DNA_shr_two_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shr_two_dout,
        if_empty_n => DNA_shr_two_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shr_two_num_data_valid,
        if_fifo_cap => DNA_shr_two_fifo_cap);

    DNA_shr_three_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_8,
        if_full_n => DNA_shr_three_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shr_three_dout,
        if_empty_n => DNA_shr_three_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shr_three_num_data_valid,
        if_fifo_cap => DNA_shr_three_fifo_cap);

    DNA_shr_four_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_9,
        if_full_n => DNA_shr_four_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shr_four_dout,
        if_empty_n => DNA_shr_four_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shr_four_num_data_valid,
        if_fifo_cap => DNA_shr_four_fifo_cap);

    DNA_shr_five_U : component SneakySnake_bit_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NeighborhoodMap_bit_U0_ap_return_10,
        if_full_n => DNA_shr_five_full_n,
        if_write => ap_channel_done_DNA_shr_five,
        if_dout => DNA_shr_five_dout,
        if_empty_n => DNA_shr_five_empty_n,
        if_read => Loop_VITIS_LOOP_709_1_proc_U0_ap_ready,
        if_num_data_valid => DNA_shr_five_num_data_valid,
        if_fifo_cap => DNA_shr_five_fifo_cap);

    add_i_i2_loc_channel_U : component SneakySnake_bit_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_VITIS_LOOP_709_1_proc_U0_ap_return,
        if_full_n => add_i_i2_loc_channel_full_n,
        if_write => Loop_VITIS_LOOP_709_1_proc_U0_ap_done,
        if_dout => add_i_i2_loc_channel_dout,
        if_empty_n => add_i_i2_loc_channel_empty_n,
        if_read => Block_entry_proc_proc_U0_ap_ready,
        if_num_data_valid => add_i_i2_loc_channel_num_data_valid,
        if_fifo_cap => add_i_i2_loc_channel_fifo_cap);





    ap_sync_reg_channel_write_DNA_shr_five_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_DNA_shr_five <= ap_const_logic_0;
            else
                if (((NeighborhoodMap_bit_U0_ap_done and NeighborhoodMap_bit_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_DNA_shr_five <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_DNA_shr_five <= ap_sync_channel_write_DNA_shr_five;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    Block_entry_proc_proc_U0_ap_continue <= ap_continue;
    Block_entry_proc_proc_U0_ap_start <= add_i_i2_loc_channel_empty_n;
    Loop_VITIS_LOOP_709_1_proc_U0_ap_continue <= add_i_i2_loc_channel_full_n;
    Loop_VITIS_LOOP_709_1_proc_U0_ap_start <= DNA_nsh_empty_n;
    NeighborhoodMap_bit_U0_ap_continue <= ap_sync_channel_write_DNA_shr_five;
    NeighborhoodMap_bit_U0_ap_start <= ap_start;
    ap_channel_done_DNA_shr_five <= ((ap_sync_reg_channel_write_DNA_shr_five xor ap_const_logic_1) and NeighborhoodMap_bit_U0_ap_done);
    ap_done <= Block_entry_proc_proc_U0_ap_done;
    ap_idle <= ((ap_const_logic_1 xor add_i_i2_loc_channel_empty_n) and (ap_const_logic_1 xor DNA_nsh_empty_n) and NeighborhoodMap_bit_U0_ap_idle and Loop_VITIS_LOOP_709_1_proc_U0_ap_idle and Block_entry_proc_proc_U0_ap_idle);
    ap_ready <= NeighborhoodMap_bit_U0_ap_ready;
    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Block_entry_proc_proc_U0_ap_return),32));
    ap_sync_channel_write_DNA_shr_five <= ((ap_channel_done_DNA_shr_five and DNA_shr_five_full_n) or ap_sync_reg_channel_write_DNA_shr_five);
end behav;
