-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc is
port (
    ap_continue : IN STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln709_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal and_ln712_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln712_reg_629 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_1_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_1_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_2_fu_340_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_2_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_3_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_3_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_4_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln713_4_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_1_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_1_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_2_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_2_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_3_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_3_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_4_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln714_4_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_after_neighbohood_fu_142_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_after_neighbohood_fu_142_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call66 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp91 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp91 : BOOLEAN;
    signal i1_fu_68 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_584_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal global_count2_fu_72 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal global_count_fu_604_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_170_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln712_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_184_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln712_fu_194_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln712_1_fu_208_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln712_fu_200_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln712_fu_216_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_fu_220_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln712_2_fu_230_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_244_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln713_fu_254_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln713_fu_262_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln713_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_278_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln713_1_fu_288_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln713_1_fu_296_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln713_1_fu_302_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_312_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln713_2_fu_322_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln713_2_fu_330_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln713_2_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_346_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln713_3_fu_356_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln713_3_fu_364_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln713_3_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_380_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln713_4_fu_390_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln713_4_fu_398_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln713_4_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_414_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln714_fu_424_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln714_fu_432_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln714_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_448_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln714_1_fu_458_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln714_1_fu_466_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln714_1_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_482_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln714_2_fu_492_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln714_2_fu_500_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln714_2_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_516_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln714_3_fu_526_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln714_3_fu_534_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln714_3_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_550_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln714_4_fu_560_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln714_4_fu_568_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln714_4_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_210 : BOOLEAN;
    signal ap_condition_212 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component SneakySnake_bit_after_neighbohood IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        DNA_nsh : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shl_one : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shl_two : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shl_three : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shl_four : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shl_five : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shr_one : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shr_two : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shr_three : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shr_four : IN STD_LOGIC_VECTOR (7 downto 0);
        DNA_shr_five : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component SneakySnake_bit_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    grp_after_neighbohood_fu_142 : component SneakySnake_bit_after_neighbohood
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        DNA_nsh => and_ln712_reg_629,
        DNA_shl_one => and_ln713_reg_634,
        DNA_shl_two => and_ln713_1_reg_639,
        DNA_shl_three => and_ln713_2_reg_644,
        DNA_shl_four => and_ln713_3_reg_649,
        DNA_shl_five => and_ln713_4_reg_654,
        DNA_shr_one => and_ln714_reg_659,
        DNA_shr_two => and_ln714_1_reg_664,
        DNA_shr_three => and_ln714_2_reg_669,
        DNA_shr_four => and_ln714_3_reg_674,
        DNA_shr_five => and_ln714_4_reg_679,
        ap_return => grp_after_neighbohood_fu_142_ap_return,
        ap_ce => grp_after_neighbohood_fu_142_ap_ce);

    flow_control_loop_delay_pipe_U : component SneakySnake_bit_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_return_preg <= global_count_fu_604_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    global_count2_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_210)) then 
                    global_count2_fu_72 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    global_count2_fu_72 <= global_count_fu_604_p2;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_212)) then
                i1_fu_68 <= i_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln712_reg_629 <= and_ln712_fu_238_p2;
                and_ln713_1_reg_639 <= and_ln713_1_fu_306_p2;
                and_ln713_2_reg_644 <= and_ln713_2_fu_340_p2;
                and_ln713_3_reg_649 <= and_ln713_3_fu_374_p2;
                and_ln713_4_reg_654 <= and_ln713_4_fu_408_p2;
                and_ln713_reg_634 <= and_ln713_fu_272_p2;
                and_ln714_1_reg_664 <= and_ln714_1_fu_476_p2;
                and_ln714_2_reg_669 <= and_ln714_2_fu_510_p2;
                and_ln714_3_reg_674 <= and_ln714_3_fu_544_p2;
                and_ln714_4_reg_679 <= and_ln714_4_fu_578_p2;
                and_ln714_reg_659 <= and_ln714_fu_442_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln712_fu_238_p2 <= (trunc_ln712_fu_226_p1 and select_ln712_2_fu_230_p3);
    and_ln713_1_fu_306_p2 <= (trunc_ln713_1_fu_302_p1 and select_ln712_2_fu_230_p3);
    and_ln713_2_fu_340_p2 <= (trunc_ln713_2_fu_336_p1 and select_ln712_2_fu_230_p3);
    and_ln713_3_fu_374_p2 <= (trunc_ln713_3_fu_370_p1 and select_ln712_2_fu_230_p3);
    and_ln713_4_fu_408_p2 <= (trunc_ln713_4_fu_404_p1 and select_ln712_2_fu_230_p3);
    and_ln713_fu_272_p2 <= (trunc_ln713_fu_268_p1 and select_ln712_2_fu_230_p3);
    and_ln714_1_fu_476_p2 <= (trunc_ln714_1_fu_472_p1 and select_ln712_2_fu_230_p3);
    and_ln714_2_fu_510_p2 <= (trunc_ln714_2_fu_506_p1 and select_ln712_2_fu_230_p3);
    and_ln714_3_fu_544_p2 <= (trunc_ln714_3_fu_540_p1 and select_ln712_2_fu_230_p3);
    and_ln714_4_fu_578_p2 <= (trunc_ln714_4_fu_574_p1 and select_ln712_2_fu_230_p3);
    and_ln714_fu_442_p2 <= (trunc_ln714_fu_438_p1 and select_ln712_2_fu_230_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp91_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0_ignore_call66, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp91 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_ignore_call66)));
    end process;

        ap_block_pp0_stage0_ignoreCallOp91 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call66_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call66 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_210_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_start_int)
    begin
                ap_condition_210 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_212_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_212 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln709_fu_590_p2, ap_start_int)
    begin
        if (((icmp_ln709_fu_590_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_block_pp0_stage0_11001, global_count_fu_604_p2, ap_return_preg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_return <= global_count_fu_604_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, i1_fu_68, ap_loop_init, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_68;
        end if; 
    end process;

    global_count_fu_604_p2 <= std_logic_vector(unsigned(grp_after_neighbohood_fu_142_ap_return) + unsigned(global_count2_fu_72));

    grp_after_neighbohood_fu_142_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp91)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp91) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_after_neighbohood_fu_142_ap_ce <= ap_const_logic_1;
        else 
            grp_after_neighbohood_fu_142_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_584_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv4_1));
    icmp_ln709_fu_590_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv4_B) else "0";
    icmp_ln712_fu_178_p2 <= "0" when (shl_ln_fu_170_p3 = ap_const_lv7_0) else "1";
    lshr_ln712_fu_220_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_fu_200_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln713_1_fu_296_p2 <= std_logic_vector(shift_right(unsigned(select_ln713_1_fu_288_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln713_2_fu_330_p2 <= std_logic_vector(shift_right(unsigned(select_ln713_2_fu_322_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln713_3_fu_364_p2 <= std_logic_vector(shift_right(unsigned(select_ln713_3_fu_356_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln713_4_fu_398_p2 <= std_logic_vector(shift_right(unsigned(select_ln713_4_fu_390_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln713_fu_262_p2 <= std_logic_vector(shift_right(unsigned(select_ln713_fu_254_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln714_1_fu_466_p2 <= std_logic_vector(shift_right(unsigned(select_ln714_1_fu_458_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln714_2_fu_500_p2 <= std_logic_vector(shift_right(unsigned(select_ln714_2_fu_492_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln714_3_fu_534_p2 <= std_logic_vector(shift_right(unsigned(select_ln714_3_fu_526_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln714_4_fu_568_p2 <= std_logic_vector(shift_right(unsigned(select_ln714_4_fu_560_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    lshr_ln714_fu_432_p2 <= std_logic_vector(shift_right(unsigned(select_ln714_fu_424_p3),to_integer(unsigned('0' & zext_ln712_fu_216_p1(31-1 downto 0)))));
    select_ln712_1_fu_208_p3 <= 
        xor_ln712_fu_194_p2 when (icmp_ln712_fu_178_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln712_2_fu_230_p3 <= 
        ap_const_lv8_3 when (icmp_ln712_fu_178_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln712_fu_200_p3 <= 
        tmp_fu_184_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read;
    select_ln713_1_fu_288_p3 <= 
        tmp_8_fu_278_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read2;
    select_ln713_2_fu_322_p3 <= 
        tmp_9_fu_312_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read3;
    select_ln713_3_fu_356_p3 <= 
        tmp_10_fu_346_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read4;
    select_ln713_4_fu_390_p3 <= 
        tmp_11_fu_380_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read5;
    select_ln713_fu_254_p3 <= 
        tmp_7_fu_244_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read1;
    select_ln714_1_fu_458_p3 <= 
        tmp_13_fu_448_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read7;
    select_ln714_2_fu_492_p3 <= 
        tmp_14_fu_482_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read8;
    select_ln714_3_fu_526_p3 <= 
        tmp_15_fu_516_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read9;
    select_ln714_4_fu_560_p3 <= 
        tmp_16_fu_550_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read10;
    select_ln714_fu_424_p3 <= 
        tmp_12_fu_414_p4 when (icmp_ln712_fu_178_p2(0) = '1') else 
        p_read6;
    shl_ln_fu_170_p3 <= (ap_sig_allocacmp_i1_load & ap_const_lv3_0);
    
    tmp_10_fu_346_p4_proc : process(p_read4)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_10_fu_346_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read4;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_10_fu_346_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_10_fu_346_p4_i) := p_read4(128-1-tmp_10_fu_346_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_346_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_11_fu_380_p4_proc : process(p_read5)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_11_fu_380_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_11_fu_380_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_11_fu_380_p4_i) := p_read5(128-1-tmp_11_fu_380_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_380_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_12_fu_414_p4_proc : process(p_read6)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_12_fu_414_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read6;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_12_fu_414_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_12_fu_414_p4_i) := p_read6(128-1-tmp_12_fu_414_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_414_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_13_fu_448_p4_proc : process(p_read7)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_13_fu_448_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read7;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_13_fu_448_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_13_fu_448_p4_i) := p_read7(128-1-tmp_13_fu_448_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_448_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_14_fu_482_p4_proc : process(p_read8)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_14_fu_482_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read8;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_14_fu_482_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_14_fu_482_p4_i) := p_read8(128-1-tmp_14_fu_482_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_482_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_15_fu_516_p4_proc : process(p_read9)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_15_fu_516_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read9;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_15_fu_516_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_15_fu_516_p4_i) := p_read9(128-1-tmp_15_fu_516_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_516_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_16_fu_550_p4_proc : process(p_read10)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_16_fu_550_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read10;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_16_fu_550_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_16_fu_550_p4_i) := p_read10(128-1-tmp_16_fu_550_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_550_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_7_fu_244_p4_proc : process(p_read1)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_7_fu_244_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read1;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_7_fu_244_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_7_fu_244_p4_i) := p_read1(128-1-tmp_7_fu_244_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_244_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_8_fu_278_p4_proc : process(p_read2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_8_fu_278_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_8_fu_278_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_8_fu_278_p4_i) := p_read2(128-1-tmp_8_fu_278_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_278_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_9_fu_312_p4_proc : process(p_read3)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_9_fu_312_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read3;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_9_fu_312_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_9_fu_312_p4_i) := p_read3(128-1-tmp_9_fu_312_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_312_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_fu_184_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_184_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_184_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_184_p4_i) := p_read(128-1-tmp_fu_184_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_184_p4 <= resvalue(128-1 downto 0);
    end process;

    trunc_ln712_fu_226_p1 <= lshr_ln712_fu_220_p2(8 - 1 downto 0);
    trunc_ln713_1_fu_302_p1 <= lshr_ln713_1_fu_296_p2(8 - 1 downto 0);
    trunc_ln713_2_fu_336_p1 <= lshr_ln713_2_fu_330_p2(8 - 1 downto 0);
    trunc_ln713_3_fu_370_p1 <= lshr_ln713_3_fu_364_p2(8 - 1 downto 0);
    trunc_ln713_4_fu_404_p1 <= lshr_ln713_4_fu_398_p2(8 - 1 downto 0);
    trunc_ln713_fu_268_p1 <= lshr_ln713_fu_262_p2(8 - 1 downto 0);
    trunc_ln714_1_fu_472_p1 <= lshr_ln714_1_fu_466_p2(8 - 1 downto 0);
    trunc_ln714_2_fu_506_p1 <= lshr_ln714_2_fu_500_p2(8 - 1 downto 0);
    trunc_ln714_3_fu_540_p1 <= lshr_ln714_3_fu_534_p2(8 - 1 downto 0);
    trunc_ln714_4_fu_574_p1 <= lshr_ln714_4_fu_568_p2(8 - 1 downto 0);
    trunc_ln714_fu_438_p1 <= lshr_ln714_fu_432_p2(8 - 1 downto 0);
    xor_ln712_fu_194_p2 <= (shl_ln_fu_170_p3 xor ap_const_lv7_7F);
    zext_ln712_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln712_1_fu_208_p3),128));
end behav;
