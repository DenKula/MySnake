-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SneakySnake_bit_NeighborhoodMap_bit_Pipeline_VITIS_LOOP_488_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DNA_8 : IN STD_LOGIC_VECTOR (255 downto 0);
    storemerge549_i_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    storemerge549_i_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of SneakySnake_bit_NeighborhoodMap_bit_Pipeline_VITIS_LOOP_488_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln488_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal index_9_fu_52 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal index_11_fu_96_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_index : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_6_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge549_i_fu_60 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal storemerge5_i_fu_174_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_23_i_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_120_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln5_fu_130_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_i_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_fu_112_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_i_fu_142_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln491_fu_150_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln491_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge5_i_fu_174_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge5_i_fu_174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_23_i_fu_112_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_i_fu_142_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge5_i_fu_174_p0 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component SneakySnake_bit_partselect_2ns_256ns_32ns_2_1_1 IS
    generic (
        DATAWIDTH : INTEGER;
        ADDRWIDTH : INTEGER;
        DATA1WIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (255 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component SneakySnake_bit_partset_128ns_128ns_2ns_32ns_128_1_1 IS
    generic (
        DATAWIDTH : INTEGER;
        DATA1WIDTH : INTEGER;
        ADDRWIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (127 downto 0);
        value : IN STD_LOGIC_VECTOR (1 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component SneakySnake_bit_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    partselect_2ns_256ns_32ns_2_1_1_U28 : component SneakySnake_bit_partselect_2ns_256ns_32ns_2_1_1
    generic map (
        DATAWIDTH => 256,
        ADDRWIDTH => 32,
        DATA1WIDTH => 2)
    port map (
        din => DNA_8,
        sel => tmp_23_i_fu_112_p2,
        dout => tmp_23_i_fu_112_p3);

    partselect_2ns_256ns_32ns_2_1_1_U29 : component SneakySnake_bit_partselect_2ns_256ns_32ns_2_1_1
    generic map (
        DATAWIDTH => 256,
        ADDRWIDTH => 32,
        DATA1WIDTH => 2)
    port map (
        din => DNA_8,
        sel => tmp_25_i_fu_142_p2,
        dout => tmp_25_i_fu_142_p3);

    partset_128ns_128ns_2ns_32ns_128_1_1_U30 : component SneakySnake_bit_partset_128ns_128ns_2ns_32ns_128_1_1
    generic map (
        DATAWIDTH => 128,
        DATA1WIDTH => 2,
        ADDRWIDTH => 32)
    port map (
        din => storemerge549_i_fu_60,
        value => storemerge5_i_fu_174_p2,
        sel => storemerge5_i_fu_174_p3,
        dout => storemerge5_i_fu_174_p4);

    flow_control_loop_pipe_sequential_init_U : component SneakySnake_bit_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln488_fu_90_p2 = ap_const_lv1_0)) then 
                    i_fu_56 <= i_6_fu_184_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_56 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    index_9_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln488_fu_90_p2 = ap_const_lv1_0)) then 
                    index_9_fu_52 <= index_11_fu_96_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    index_9_fu_52 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln488_fu_90_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                storemerge549_i_fu_60 <= storemerge5_i_fu_174_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln488_fu_90_p2)
    begin
        if (((icmp_ln488_fu_90_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_index_assign_proc : process(ap_CS_fsm_state1, index_9_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_index <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_index <= index_9_fu_52;
        end if; 
    end process;

    i_6_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv8_2));
    icmp_ln488_fu_90_p2 <= "1" when (ap_sig_allocacmp_index = ap_const_lv7_7F) else "0";
    icmp_ln491_fu_156_p2 <= "1" when (or_ln491_fu_150_p2 = ap_const_lv2_0) else "0";
    index_11_fu_96_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_index) + unsigned(ap_const_lv7_1));
    or_ln491_fu_150_p2 <= (tmp_25_i_fu_142_p3 or tmp_23_i_fu_112_p3);
    or_ln5_fu_130_p3 <= (tmp_s_fu_120_p4 & ap_const_lv1_1);
    storemerge549_i_out <= storemerge549_i_fu_60;

    storemerge549_i_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln488_fu_90_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln488_fu_90_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            storemerge549_i_out_ap_vld <= ap_const_logic_1;
        else 
            storemerge549_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    storemerge5_i_fu_174_p2 <= 
        ap_const_lv2_0 when (icmp_ln491_fu_156_p2(0) = '1') else 
        ap_const_lv2_1;
    storemerge5_i_fu_174_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_index),32));
    tmp_23_i_fu_112_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),32));
    tmp_25_i_fu_142_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln5_fu_130_p3),32));
    tmp_s_fu_120_p4 <= ap_sig_allocacmp_i_load(7 downto 1);
end behav;
