-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SneakySnake_bit_Loop_VITIS_LOOP_707_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of SneakySnake_bit_Loop_VITIS_LOOP_707_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln707_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal icmp_ln64020_reg_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64020_reg_218_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal DNA_nsh_fu_419_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_nsh_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_one_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_one_reg_1402 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_two_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_two_reg_1407 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_three_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_three_reg_1412 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_four_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_four_reg_1417 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_five_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shl_five_reg_1422 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_one_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_one_reg_1427 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_two_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_two_reg_1432 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_three_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_three_reg_1437 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_four_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_four_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_five_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal DNA_shr_five_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln640_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln640_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln707_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_val2240_i_i10_load_reg_1461 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2138_i_i11_load_reg_1466 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2036_i_i12_load_reg_1471 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1934_i_i13_load_reg_1476 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1832_i_i14_load_reg_1481 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1730_i_i15_load_reg_1486 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1628_i_i16_load_reg_1491 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val26_i_i17_load_reg_1496 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_10_fu_989_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_10_reg_1501 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_count_one_bit_fu_240_ap_ready : STD_LOGIC;
    signal max_count_one_bit_fu_240_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_i_i_count_one_bit_fu_245_ap_ready : STD_LOGIC;
    signal tmp_8_i_i_count_one_bit_fu_245_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_2_count_one_bit_fu_250_ap_ready : STD_LOGIC;
    signal max_2_count_one_bit_fu_250_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_i_count_one_bit_fu_255_ap_ready : STD_LOGIC;
    signal tmp_i_i_count_one_bit_fu_255_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_5_count_one_bit_fu_260_ap_ready : STD_LOGIC;
    signal max_5_count_one_bit_fu_260_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i_i_count_one_bit_fu_265_ap_ready : STD_LOGIC;
    signal tmp_1_i_i_count_one_bit_fu_265_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_8_count_one_bit_fu_270_ap_ready : STD_LOGIC;
    signal max_8_count_one_bit_fu_270_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_i_i_count_one_bit_fu_275_ap_ready : STD_LOGIC;
    signal tmp_2_i_i_count_one_bit_fu_275_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_12_count_one_bit_fu_280_ap_ready : STD_LOGIC;
    signal max_12_count_one_bit_fu_280_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_i_i_count_one_bit_fu_285_ap_ready : STD_LOGIC;
    signal tmp_3_i_i_count_one_bit_fu_285_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal max_11_count_one_bit_fu_290_ap_ready : STD_LOGIC;
    signal max_11_count_one_bit_fu_290_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_icmp_ln64020_phi_fu_221_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_first_iter_06_phi_fu_232_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_ignoreCallOp143 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp144 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp145 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp146 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp147 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp148 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp149 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp150 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp175 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp176 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp177 : BOOLEAN;
    signal indvar_flatten1_fu_80 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln707_fu_765_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten1_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_fu_84 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_10_fu_343_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i2_load : STD_LOGIC_VECTOR (3 downto 0);
    signal global_count3_fu_88 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal global_count_2_fu_1003_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal global_count_2125_fu_92 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal global_count_fu_1192_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal iter18_fu_96 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal iter_fu_777_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_iter18_load : STD_LOGIC_VECTOR (1 downto 0);
    signal global_count_319_fu_100 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal global_count_3_fu_1084_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2221_fu_104 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_791_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_2221_load : STD_LOGIC_VECTOR (3 downto 0);
    signal p_val2546_i_i7_fu_108 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln673_fu_1186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2444_i_i8_fu_112 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln672_fu_1176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2342_i_i9_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln671_fu_1166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2240_i_i10_fu_120 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln670_fu_1157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val2240_i_i10_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2138_i_i11_fu_124 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln669_fu_1148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val2138_i_i11_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val2036_i_i12_fu_128 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln668_fu_1139_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val2036_i_i12_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1934_i_i13_fu_132 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln667_fu_1130_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val1934_i_i13_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1832_i_i14_fu_136 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln666_fu_1121_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val1832_i_i14_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1730_i_i15_fu_140 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln665_fu_1112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val1730_i_i15_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val1628_i_i16_fu_144 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln664_fu_1103_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val1628_i_i16_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val26_i_i17_fu_148 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shl_ln663_fu_1094_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_p_val26_i_i17_load : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_351_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln710_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_365_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln710_fu_375_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln710_1_fu_389_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln710_fu_381_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln710_fu_397_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln710_fu_401_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln710_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln710_2_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_425_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_fu_435_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_fu_443_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_459_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_1_fu_469_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_1_fu_477_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_1_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_493_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_2_fu_503_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_2_fu_511_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_2_fu_517_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_527_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_3_fu_537_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_3_fu_545_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_3_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_561_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln711_4_fu_571_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln711_4_fu_579_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln711_4_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_595_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_fu_605_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_fu_613_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_fu_619_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_629_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_1_fu_639_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_1_fu_647_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_1_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_663_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_2_fu_673_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_2_fu_681_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_2_fu_687_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_697_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_3_fu_707_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_3_fu_715_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_3_fu_721_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_731_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln712_4_fu_741_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln712_4_fu_749_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln712_4_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln640_fu_771_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln318_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_1_fu_905_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_1_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_3_fu_919_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_2_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_933_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_3_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_6_fu_947_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_4_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_7_fu_961_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_5_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_9_fu_975_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_6_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln318_7_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_13_fu_1031_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_8_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_14_fu_1044_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln318_9_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_16_fu_1058_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln658_fu_1066_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln706_fu_1076_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln658_fu_1070_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_16cast_fu_1090_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast159_fu_1099_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast160_fu_1108_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast161_fu_1117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast162_fu_1126_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast163_fu_1135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast164_fu_1144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast165_fu_1153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast166_fu_1162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast167_fu_1172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_16cast168_fu_1182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_864 : BOOLEAN;
    signal ap_condition_867 : BOOLEAN;
    signal ap_condition_283 : BOOLEAN;
    signal ap_condition_148 : BOOLEAN;
    signal ap_condition_877 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component SneakySnake_bit_count_one_bit IS
    port (
        ap_ready : OUT STD_LOGIC;
        input_seq_val : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component SneakySnake_bit_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    max_count_one_bit_fu_240 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_count_one_bit_fu_240_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val26_i_i17_load,
        ap_return => max_count_one_bit_fu_240_ap_return,
        ap_rst => ap_rst);

    tmp_8_i_i_count_one_bit_fu_245 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_8_i_i_count_one_bit_fu_245_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val1628_i_i16_load,
        ap_return => tmp_8_i_i_count_one_bit_fu_245_ap_return,
        ap_rst => ap_rst);

    max_2_count_one_bit_fu_250 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_2_count_one_bit_fu_250_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val1730_i_i15_load,
        ap_return => max_2_count_one_bit_fu_250_ap_return,
        ap_rst => ap_rst);

    tmp_i_i_count_one_bit_fu_255 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_i_i_count_one_bit_fu_255_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val1832_i_i14_load,
        ap_return => tmp_i_i_count_one_bit_fu_255_ap_return,
        ap_rst => ap_rst);

    max_5_count_one_bit_fu_260 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_5_count_one_bit_fu_260_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val1934_i_i13_load,
        ap_return => max_5_count_one_bit_fu_260_ap_return,
        ap_rst => ap_rst);

    tmp_1_i_i_count_one_bit_fu_265 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_1_i_i_count_one_bit_fu_265_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val2036_i_i12_load,
        ap_return => tmp_1_i_i_count_one_bit_fu_265_ap_return,
        ap_rst => ap_rst);

    max_8_count_one_bit_fu_270 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_8_count_one_bit_fu_270_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val2138_i_i11_load,
        ap_return => max_8_count_one_bit_fu_270_ap_return,
        ap_rst => ap_rst);

    tmp_2_i_i_count_one_bit_fu_275 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_2_i_i_count_one_bit_fu_275_ap_ready,
        input_seq_val => ap_sig_allocacmp_p_val2240_i_i10_load,
        ap_return => tmp_2_i_i_count_one_bit_fu_275_ap_return,
        ap_rst => ap_rst);

    max_12_count_one_bit_fu_280 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_12_count_one_bit_fu_280_ap_ready,
        input_seq_val => p_val2342_i_i9_fu_116,
        ap_return => max_12_count_one_bit_fu_280_ap_return,
        ap_rst => ap_rst);

    tmp_3_i_i_count_one_bit_fu_285 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => tmp_3_i_i_count_one_bit_fu_285_ap_ready,
        input_seq_val => p_val2444_i_i8_fu_112,
        ap_return => tmp_3_i_i_count_one_bit_fu_285_ap_return,
        ap_rst => ap_rst);

    max_11_count_one_bit_fu_290 : component SneakySnake_bit_count_one_bit
    port map (
        ap_ready => max_11_count_one_bit_fu_290_ap_ready,
        input_seq_val => p_val2546_i_i7_fu_108,
        ap_return => max_11_count_one_bit_fu_290_ap_return,
        ap_rst => ap_rst);

    flow_control_loop_delay_pipe_U : component SneakySnake_bit_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_return_preg <= global_count_fu_1192_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    global_count3_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_283)) then 
                    global_count3_fu_88 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    global_count3_fu_88 <= global_count_2_fu_1003_p3;
                end if;
            end if; 
        end if;
    end process;

    global_count_319_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_283)) then 
                    global_count_319_fu_100 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    global_count_319_fu_100 <= global_count_3_fu_1084_p2;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                i2_fu_84 <= i_10_fu_343_p3;
            end if;
        end if;
    end process;

    i_2221_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                i_2221_fu_104 <= i_fu_791_p2;
            end if;
        end if;
    end process;

    icmp_ln64020_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_877)) then 
                    icmp_ln64020_reg_218 <= icmp_ln640_reg_1452;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln64020_reg_218 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                indvar_flatten1_fu_80 <= add_ln707_fu_765_p2;
            end if;
        end if;
    end process;

    iter18_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                iter18_fu_96 <= iter_fu_777_p3;
            end if;
        end if;
    end process;

    p_val1628_i_i16_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val1628_i_i16_fu_144 <= DNA_shl_one_reg_1402;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val1628_i_i16_fu_144 <= shl_ln664_fu_1103_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1730_i_i15_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val1730_i_i15_fu_140 <= DNA_shl_two_reg_1407;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val1730_i_i15_fu_140 <= shl_ln665_fu_1112_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1832_i_i14_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val1832_i_i14_fu_136 <= DNA_shl_three_reg_1412;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val1832_i_i14_fu_136 <= shl_ln666_fu_1121_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val1934_i_i13_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val1934_i_i13_fu_132 <= DNA_shl_four_reg_1417;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val1934_i_i13_fu_132 <= shl_ln667_fu_1130_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2036_i_i12_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2036_i_i12_fu_128 <= DNA_shl_five_reg_1422;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2036_i_i12_fu_128 <= shl_ln668_fu_1139_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2138_i_i11_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2138_i_i11_fu_124 <= DNA_shr_one_reg_1427;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2138_i_i11_fu_124 <= shl_ln669_fu_1148_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2240_i_i10_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2240_i_i10_fu_120 <= DNA_shr_two_reg_1432;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2240_i_i10_fu_120 <= shl_ln670_fu_1157_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2342_i_i9_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2342_i_i9_fu_116 <= DNA_shr_three_reg_1437;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2342_i_i9_fu_116 <= shl_ln671_fu_1166_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2444_i_i8_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2444_i_i8_fu_112 <= DNA_shr_four_reg_1442;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2444_i_i8_fu_112 <= shl_ln672_fu_1176_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val2546_i_i7_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val2546_i_i7_fu_108 <= DNA_shr_five_reg_1447;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val2546_i_i7_fu_108 <= shl_ln673_fu_1186_p2;
                end if;
            end if; 
        end if;
    end process;

    p_val26_i_i17_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_867)) then 
                    p_val26_i_i17_fu_148 <= DNA_nsh_reg_1397;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_val26_i_i17_fu_148 <= shl_ln663_fu_1094_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DNA_nsh_reg_1397 <= DNA_nsh_fu_419_p2;
                DNA_shl_five_reg_1422 <= DNA_shl_five_fu_589_p2;
                DNA_shl_four_reg_1417 <= DNA_shl_four_fu_555_p2;
                DNA_shl_one_reg_1402 <= DNA_shl_one_fu_453_p2;
                DNA_shl_three_reg_1412 <= DNA_shl_three_fu_521_p2;
                DNA_shl_two_reg_1407 <= DNA_shl_two_fu_487_p2;
                DNA_shr_five_reg_1447 <= DNA_shr_five_fu_759_p2;
                DNA_shr_four_reg_1442 <= DNA_shr_four_fu_725_p2;
                DNA_shr_one_reg_1427 <= DNA_shr_one_fu_623_p2;
                DNA_shr_three_reg_1437 <= DNA_shr_three_fu_691_p2;
                DNA_shr_two_reg_1432 <= DNA_shr_two_fu_657_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln64020_reg_218_pp0_iter1_reg <= icmp_ln64020_reg_218;
                icmp_ln707_reg_1457 <= icmp_ln707_fu_797_p2;
                max_10_reg_1501 <= max_10_fu_989_p3;
                or_ln706_reg_1393 <= or_ln706_fu_337_p2;
                p_val1628_i_i16_load_reg_1491 <= ap_sig_allocacmp_p_val1628_i_i16_load;
                p_val1730_i_i15_load_reg_1486 <= ap_sig_allocacmp_p_val1730_i_i15_load;
                p_val1832_i_i14_load_reg_1481 <= ap_sig_allocacmp_p_val1832_i_i14_load;
                p_val1934_i_i13_load_reg_1476 <= ap_sig_allocacmp_p_val1934_i_i13_load;
                p_val2036_i_i12_load_reg_1471 <= ap_sig_allocacmp_p_val2036_i_i12_load;
                p_val2138_i_i11_load_reg_1466 <= ap_sig_allocacmp_p_val2138_i_i11_load;
                p_val2240_i_i10_load_reg_1461 <= ap_sig_allocacmp_p_val2240_i_i10_load;
                p_val26_i_i17_load_reg_1496 <= ap_sig_allocacmp_p_val26_i_i17_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                global_count_2125_fu_92 <= global_count_fu_1192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln640_reg_1452 <= icmp_ln640_fu_785_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    DNA_nsh_fu_419_p2 <= (trunc_ln710_fu_407_p1 and select_ln710_2_fu_411_p3);
    DNA_shl_five_fu_589_p2 <= (trunc_ln711_4_fu_585_p1 and select_ln710_2_fu_411_p3);
    DNA_shl_four_fu_555_p2 <= (trunc_ln711_3_fu_551_p1 and select_ln710_2_fu_411_p3);
    DNA_shl_one_fu_453_p2 <= (trunc_ln711_fu_449_p1 and select_ln710_2_fu_411_p3);
    DNA_shl_three_fu_521_p2 <= (trunc_ln711_2_fu_517_p1 and select_ln710_2_fu_411_p3);
    DNA_shl_two_fu_487_p2 <= (trunc_ln711_1_fu_483_p1 and select_ln710_2_fu_411_p3);
    DNA_shr_five_fu_759_p2 <= (trunc_ln712_4_fu_755_p1 and select_ln710_2_fu_411_p3);
    DNA_shr_four_fu_725_p2 <= (trunc_ln712_3_fu_721_p1 and select_ln710_2_fu_411_p3);
    DNA_shr_one_fu_623_p2 <= (trunc_ln712_fu_619_p1 and select_ln710_2_fu_411_p3);
    DNA_shr_three_fu_691_p2 <= (trunc_ln712_2_fu_687_p1 and select_ln710_2_fu_411_p3);
    DNA_shr_two_fu_657_p2 <= (trunc_ln712_1_fu_653_p1 and select_ln710_2_fu_411_p3);
    add_ln640_fu_771_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_iter18_load) + unsigned(ap_const_lv2_1));
    add_ln658_fu_1070_p2 <= std_logic_vector(unsigned(trunc_ln658_fu_1066_p1) + unsigned(ap_const_lv2_1));
    add_ln707_fu_765_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten1_load) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_ignoreCallOp143 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp144 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp146 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp147 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp148 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp149 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp175 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp176 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp177 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_148_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_148 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_283_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_start_int)
    begin
                ap_condition_283 <= ((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_864_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln707_reg_1457, ap_block_pp0_stage0)
    begin
                ap_condition_864 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1457 = ap_const_lv1_0));
    end process;


    ap_condition_867_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln706_reg_1393)
    begin
                ap_condition_867 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln706_reg_1393 = ap_const_lv1_1));
    end process;


    ap_condition_877_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln707_reg_1457)
    begin
                ap_condition_877 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln707_reg_1457 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln707_fu_797_p2, ap_start_int)
    begin
        if (((icmp_ln707_fu_797_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_first_iter_06_phi_fu_232_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_864)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_864)) then 
                ap_phi_mux_first_iter_06_phi_fu_232_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_06_phi_fu_232_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_06_phi_fu_232_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_06_phi_fu_232_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln64020_phi_fu_221_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln640_reg_1452, ap_loop_init, ap_condition_864)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_864)) then 
                ap_phi_mux_icmp_ln64020_phi_fu_221_p4 <= icmp_ln640_reg_1452;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln64020_phi_fu_221_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln64020_phi_fu_221_p4 <= icmp_ln640_reg_1452;
            end if;
        else 
            ap_phi_mux_icmp_ln64020_phi_fu_221_p4 <= icmp_ln640_reg_1452;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_block_pp0_stage0_11001, global_count_fu_1192_p2, ap_return_preg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_return <= global_count_fu_1192_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i2_fu_84, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i2_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i2_load <= i2_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_i_2221_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_2221_fu_104, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2221_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i_2221_load <= i_2221_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten1_fu_80, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten1_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten1_load <= indvar_flatten1_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_iter18_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, iter18_fu_96, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_iter18_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_iter18_load <= iter18_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_p_val1628_i_i16_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shl_one_reg_1402, ap_block_pp0_stage0, p_val1628_i_i16_fu_144, shl_ln664_fu_1103_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val1628_i_i16_load <= DNA_shl_one_reg_1402;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val1628_i_i16_load <= shl_ln664_fu_1103_p2;
            else 
                ap_sig_allocacmp_p_val1628_i_i16_load <= p_val1628_i_i16_fu_144;
            end if;
        else 
            ap_sig_allocacmp_p_val1628_i_i16_load <= p_val1628_i_i16_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_p_val1730_i_i15_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shl_two_reg_1407, ap_block_pp0_stage0, p_val1730_i_i15_fu_140, shl_ln665_fu_1112_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val1730_i_i15_load <= DNA_shl_two_reg_1407;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val1730_i_i15_load <= shl_ln665_fu_1112_p2;
            else 
                ap_sig_allocacmp_p_val1730_i_i15_load <= p_val1730_i_i15_fu_140;
            end if;
        else 
            ap_sig_allocacmp_p_val1730_i_i15_load <= p_val1730_i_i15_fu_140;
        end if; 
    end process;


    ap_sig_allocacmp_p_val1832_i_i14_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shl_three_reg_1412, ap_block_pp0_stage0, p_val1832_i_i14_fu_136, shl_ln666_fu_1121_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val1832_i_i14_load <= DNA_shl_three_reg_1412;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val1832_i_i14_load <= shl_ln666_fu_1121_p2;
            else 
                ap_sig_allocacmp_p_val1832_i_i14_load <= p_val1832_i_i14_fu_136;
            end if;
        else 
            ap_sig_allocacmp_p_val1832_i_i14_load <= p_val1832_i_i14_fu_136;
        end if; 
    end process;


    ap_sig_allocacmp_p_val1934_i_i13_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shl_four_reg_1417, ap_block_pp0_stage0, p_val1934_i_i13_fu_132, shl_ln667_fu_1130_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val1934_i_i13_load <= DNA_shl_four_reg_1417;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val1934_i_i13_load <= shl_ln667_fu_1130_p2;
            else 
                ap_sig_allocacmp_p_val1934_i_i13_load <= p_val1934_i_i13_fu_132;
            end if;
        else 
            ap_sig_allocacmp_p_val1934_i_i13_load <= p_val1934_i_i13_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_p_val2036_i_i12_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shl_five_reg_1422, ap_block_pp0_stage0, p_val2036_i_i12_fu_128, shl_ln668_fu_1139_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val2036_i_i12_load <= DNA_shl_five_reg_1422;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val2036_i_i12_load <= shl_ln668_fu_1139_p2;
            else 
                ap_sig_allocacmp_p_val2036_i_i12_load <= p_val2036_i_i12_fu_128;
            end if;
        else 
            ap_sig_allocacmp_p_val2036_i_i12_load <= p_val2036_i_i12_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_p_val2138_i_i11_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shr_one_reg_1427, ap_block_pp0_stage0, p_val2138_i_i11_fu_124, shl_ln669_fu_1148_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val2138_i_i11_load <= DNA_shr_one_reg_1427;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val2138_i_i11_load <= shl_ln669_fu_1148_p2;
            else 
                ap_sig_allocacmp_p_val2138_i_i11_load <= p_val2138_i_i11_fu_124;
            end if;
        else 
            ap_sig_allocacmp_p_val2138_i_i11_load <= p_val2138_i_i11_fu_124;
        end if; 
    end process;


    ap_sig_allocacmp_p_val2240_i_i10_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_shr_two_reg_1432, ap_block_pp0_stage0, p_val2240_i_i10_fu_120, shl_ln670_fu_1157_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val2240_i_i10_load <= DNA_shr_two_reg_1432;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val2240_i_i10_load <= shl_ln670_fu_1157_p2;
            else 
                ap_sig_allocacmp_p_val2240_i_i10_load <= p_val2240_i_i10_fu_120;
            end if;
        else 
            ap_sig_allocacmp_p_val2240_i_i10_load <= p_val2240_i_i10_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_p_val26_i_i17_load_assign_proc : process(ap_enable_reg_pp0_iter2, DNA_nsh_reg_1397, ap_block_pp0_stage0, p_val26_i_i17_fu_148, shl_ln663_fu_1094_p2, ap_condition_867)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_867)) then 
                ap_sig_allocacmp_p_val26_i_i17_load <= DNA_nsh_reg_1397;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p_val26_i_i17_load <= shl_ln663_fu_1094_p2;
            else 
                ap_sig_allocacmp_p_val26_i_i17_load <= p_val26_i_i17_fu_148;
            end if;
        else 
            ap_sig_allocacmp_p_val26_i_i17_load <= p_val26_i_i17_fu_148;
        end if; 
    end process;

    global_count_2_fu_1003_p3 <= 
        global_count_2125_fu_92 when (icmp_ln64020_reg_218_pp0_iter1_reg(0) = '1') else 
        global_count3_fu_88;
    global_count_3_fu_1084_p2 <= std_logic_vector(unsigned(select_ln706_fu_1076_p3) + unsigned(add_ln658_fu_1070_p2));
    global_count_fu_1192_p2 <= std_logic_vector(unsigned(global_count_3_fu_1084_p2) + unsigned(global_count_2_fu_1003_p3));
    i_10_fu_343_p3 <= 
        ap_sig_allocacmp_i_2221_load when (ap_phi_mux_icmp_ln64020_phi_fu_221_p4(0) = '1') else 
        ap_sig_allocacmp_i2_load;
    i_fu_791_p2 <= std_logic_vector(unsigned(i_10_fu_343_p3) + unsigned(ap_const_lv4_1));
    icmp_ln318_1_fu_913_p2 <= "1" when (unsigned(max_2_count_one_bit_fu_250_ap_return) > unsigned(max_1_fu_905_p3)) else "0";
    icmp_ln318_2_fu_927_p2 <= "1" when (unsigned(tmp_i_i_count_one_bit_fu_255_ap_return) > unsigned(max_3_fu_919_p3)) else "0";
    icmp_ln318_3_fu_941_p2 <= "1" when (unsigned(max_5_count_one_bit_fu_260_ap_return) > unsigned(max_4_fu_933_p3)) else "0";
    icmp_ln318_4_fu_955_p2 <= "1" when (unsigned(tmp_1_i_i_count_one_bit_fu_265_ap_return) > unsigned(max_6_fu_947_p3)) else "0";
    icmp_ln318_5_fu_969_p2 <= "1" when (unsigned(max_8_count_one_bit_fu_270_ap_return) > unsigned(max_7_fu_961_p3)) else "0";
    icmp_ln318_6_fu_983_p2 <= "1" when (unsigned(tmp_2_i_i_count_one_bit_fu_275_ap_return) > unsigned(max_9_fu_975_p3)) else "0";
    icmp_ln318_7_fu_1026_p2 <= "1" when (unsigned(max_12_count_one_bit_fu_280_ap_return) > unsigned(max_10_reg_1501)) else "0";
    icmp_ln318_8_fu_1038_p2 <= "1" when (unsigned(tmp_3_i_i_count_one_bit_fu_285_ap_return) > unsigned(max_13_fu_1031_p3)) else "0";
    icmp_ln318_9_fu_1052_p2 <= "1" when (unsigned(max_11_count_one_bit_fu_290_ap_return) > unsigned(max_14_fu_1044_p3)) else "0";
    icmp_ln318_fu_899_p2 <= "1" when (unsigned(tmp_8_i_i_count_one_bit_fu_245_ap_return) > unsigned(max_count_one_bit_fu_240_ap_return)) else "0";
    icmp_ln640_fu_785_p2 <= "1" when (iter_fu_777_p3 = ap_const_lv2_3) else "0";
    icmp_ln707_fu_797_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten1_load = ap_const_lv6_23) else "0";
    icmp_ln710_fu_359_p2 <= "0" when (shl_ln_fu_351_p3 = ap_const_lv7_0) else "1";
    iter_fu_777_p3 <= 
        ap_const_lv2_1 when (ap_phi_mux_icmp_ln64020_phi_fu_221_p4(0) = '1') else 
        add_ln640_fu_771_p2;
    lshr_ln710_fu_401_p2 <= std_logic_vector(shift_right(unsigned(select_ln710_fu_381_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln711_1_fu_477_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_1_fu_469_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln711_2_fu_511_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_2_fu_503_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln711_3_fu_545_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_3_fu_537_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln711_4_fu_579_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_4_fu_571_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln711_fu_443_p2 <= std_logic_vector(shift_right(unsigned(select_ln711_fu_435_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln712_1_fu_647_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_1_fu_639_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln712_2_fu_681_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_2_fu_673_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln712_3_fu_715_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_3_fu_707_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln712_4_fu_749_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_4_fu_741_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    lshr_ln712_fu_613_p2 <= std_logic_vector(shift_right(unsigned(select_ln712_fu_605_p3),to_integer(unsigned('0' & zext_ln710_fu_397_p1(31-1 downto 0)))));
    max_10_fu_989_p3 <= 
        tmp_2_i_i_count_one_bit_fu_275_ap_return when (icmp_ln318_6_fu_983_p2(0) = '1') else 
        max_9_fu_975_p3;
    max_13_fu_1031_p3 <= 
        max_12_count_one_bit_fu_280_ap_return when (icmp_ln318_7_fu_1026_p2(0) = '1') else 
        max_10_reg_1501;
    max_14_fu_1044_p3 <= 
        tmp_3_i_i_count_one_bit_fu_285_ap_return when (icmp_ln318_8_fu_1038_p2(0) = '1') else 
        max_13_fu_1031_p3;
    max_16_fu_1058_p3 <= 
        max_11_count_one_bit_fu_290_ap_return when (icmp_ln318_9_fu_1052_p2(0) = '1') else 
        max_14_fu_1044_p3;
    max_16cast159_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast160_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast161_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast162_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast163_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast164_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast165_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast166_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast167_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast168_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_16cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_16_fu_1058_p3),8));
    max_1_fu_905_p3 <= 
        tmp_8_i_i_count_one_bit_fu_245_ap_return when (icmp_ln318_fu_899_p2(0) = '1') else 
        max_count_one_bit_fu_240_ap_return;
    max_3_fu_919_p3 <= 
        max_2_count_one_bit_fu_250_ap_return when (icmp_ln318_1_fu_913_p2(0) = '1') else 
        max_1_fu_905_p3;
    max_4_fu_933_p3 <= 
        tmp_i_i_count_one_bit_fu_255_ap_return when (icmp_ln318_2_fu_927_p2(0) = '1') else 
        max_3_fu_919_p3;
    max_6_fu_947_p3 <= 
        max_5_count_one_bit_fu_260_ap_return when (icmp_ln318_3_fu_941_p2(0) = '1') else 
        max_4_fu_933_p3;
    max_7_fu_961_p3 <= 
        tmp_1_i_i_count_one_bit_fu_265_ap_return when (icmp_ln318_4_fu_955_p2(0) = '1') else 
        max_6_fu_947_p3;
    max_9_fu_975_p3 <= 
        max_8_count_one_bit_fu_270_ap_return when (icmp_ln318_5_fu_969_p2(0) = '1') else 
        max_7_fu_961_p3;
    or_ln706_fu_337_p2 <= (ap_phi_mux_icmp_ln64020_phi_fu_221_p4 or ap_phi_mux_first_iter_06_phi_fu_232_p4);
    select_ln706_fu_1076_p3 <= 
        ap_const_lv2_0 when (icmp_ln64020_reg_218_pp0_iter1_reg(0) = '1') else 
        global_count_319_fu_100;
    select_ln710_1_fu_389_p3 <= 
        xor_ln710_fu_375_p2 when (icmp_ln710_fu_359_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln710_2_fu_411_p3 <= 
        ap_const_lv8_3 when (icmp_ln710_fu_359_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln710_fu_381_p3 <= 
        tmp_fu_365_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read;
    select_ln711_1_fu_469_p3 <= 
        tmp_8_fu_459_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read2;
    select_ln711_2_fu_503_p3 <= 
        tmp_9_fu_493_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read3;
    select_ln711_3_fu_537_p3 <= 
        tmp_10_fu_527_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read4;
    select_ln711_4_fu_571_p3 <= 
        tmp_11_fu_561_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read5;
    select_ln711_fu_435_p3 <= 
        tmp_7_fu_425_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read1;
    select_ln712_1_fu_639_p3 <= 
        tmp_13_fu_629_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read7;
    select_ln712_2_fu_673_p3 <= 
        tmp_14_fu_663_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read8;
    select_ln712_3_fu_707_p3 <= 
        tmp_15_fu_697_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read9;
    select_ln712_4_fu_741_p3 <= 
        tmp_16_fu_731_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read10;
    select_ln712_fu_605_p3 <= 
        tmp_12_fu_595_p4 when (icmp_ln710_fu_359_p2(0) = '1') else 
        p_read6;
    shl_ln663_fu_1094_p2 <= std_logic_vector(shift_left(unsigned(p_val26_i_i17_load_reg_1496),to_integer(unsigned('0' & max_16cast_fu_1090_p1(8-1 downto 0)))));
    shl_ln664_fu_1103_p2 <= std_logic_vector(shift_left(unsigned(p_val1628_i_i16_load_reg_1491),to_integer(unsigned('0' & max_16cast159_fu_1099_p1(8-1 downto 0)))));
    shl_ln665_fu_1112_p2 <= std_logic_vector(shift_left(unsigned(p_val1730_i_i15_load_reg_1486),to_integer(unsigned('0' & max_16cast160_fu_1108_p1(8-1 downto 0)))));
    shl_ln666_fu_1121_p2 <= std_logic_vector(shift_left(unsigned(p_val1832_i_i14_load_reg_1481),to_integer(unsigned('0' & max_16cast161_fu_1117_p1(8-1 downto 0)))));
    shl_ln667_fu_1130_p2 <= std_logic_vector(shift_left(unsigned(p_val1934_i_i13_load_reg_1476),to_integer(unsigned('0' & max_16cast162_fu_1126_p1(8-1 downto 0)))));
    shl_ln668_fu_1139_p2 <= std_logic_vector(shift_left(unsigned(p_val2036_i_i12_load_reg_1471),to_integer(unsigned('0' & max_16cast163_fu_1135_p1(8-1 downto 0)))));
    shl_ln669_fu_1148_p2 <= std_logic_vector(shift_left(unsigned(p_val2138_i_i11_load_reg_1466),to_integer(unsigned('0' & max_16cast164_fu_1144_p1(8-1 downto 0)))));
    shl_ln670_fu_1157_p2 <= std_logic_vector(shift_left(unsigned(p_val2240_i_i10_load_reg_1461),to_integer(unsigned('0' & max_16cast165_fu_1153_p1(8-1 downto 0)))));
    shl_ln671_fu_1166_p2 <= std_logic_vector(shift_left(unsigned(p_val2342_i_i9_fu_116),to_integer(unsigned('0' & max_16cast166_fu_1162_p1(8-1 downto 0)))));
    shl_ln672_fu_1176_p2 <= std_logic_vector(shift_left(unsigned(p_val2444_i_i8_fu_112),to_integer(unsigned('0' & max_16cast167_fu_1172_p1(8-1 downto 0)))));
    shl_ln673_fu_1186_p2 <= std_logic_vector(shift_left(unsigned(p_val2546_i_i7_fu_108),to_integer(unsigned('0' & max_16cast168_fu_1182_p1(8-1 downto 0)))));
    shl_ln_fu_351_p3 <= (i_10_fu_343_p3 & ap_const_lv3_0);
    
    tmp_10_fu_527_p4_proc : process(p_read4)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_10_fu_527_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read4;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_10_fu_527_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_10_fu_527_p4_i) := p_read4(128-1-tmp_10_fu_527_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_527_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_11_fu_561_p4_proc : process(p_read5)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_11_fu_561_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_11_fu_561_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_11_fu_561_p4_i) := p_read5(128-1-tmp_11_fu_561_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_561_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_12_fu_595_p4_proc : process(p_read6)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_12_fu_595_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read6;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_12_fu_595_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_12_fu_595_p4_i) := p_read6(128-1-tmp_12_fu_595_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_595_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_13_fu_629_p4_proc : process(p_read7)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_13_fu_629_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read7;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_13_fu_629_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_13_fu_629_p4_i) := p_read7(128-1-tmp_13_fu_629_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_629_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_14_fu_663_p4_proc : process(p_read8)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_14_fu_663_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read8;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_14_fu_663_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_14_fu_663_p4_i) := p_read8(128-1-tmp_14_fu_663_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_663_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_15_fu_697_p4_proc : process(p_read9)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_15_fu_697_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read9;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_15_fu_697_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_15_fu_697_p4_i) := p_read9(128-1-tmp_15_fu_697_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_697_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_16_fu_731_p4_proc : process(p_read10)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_16_fu_731_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read10;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_16_fu_731_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_16_fu_731_p4_i) := p_read10(128-1-tmp_16_fu_731_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_731_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_7_fu_425_p4_proc : process(p_read1)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_7_fu_425_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read1;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_7_fu_425_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_7_fu_425_p4_i) := p_read1(128-1-tmp_7_fu_425_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_425_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_8_fu_459_p4_proc : process(p_read2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_8_fu_459_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_8_fu_459_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_8_fu_459_p4_i) := p_read2(128-1-tmp_8_fu_459_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_459_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_9_fu_493_p4_proc : process(p_read3)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_9_fu_493_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read3;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_9_fu_493_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_9_fu_493_p4_i) := p_read3(128-1-tmp_9_fu_493_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_493_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_fu_365_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_365_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_365_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_365_p4_i) := p_read(128-1-tmp_fu_365_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_365_p4 <= resvalue(128-1 downto 0);
    end process;

    trunc_ln658_fu_1066_p1 <= max_16_fu_1058_p3(2 - 1 downto 0);
    trunc_ln710_fu_407_p1 <= lshr_ln710_fu_401_p2(8 - 1 downto 0);
    trunc_ln711_1_fu_483_p1 <= lshr_ln711_1_fu_477_p2(8 - 1 downto 0);
    trunc_ln711_2_fu_517_p1 <= lshr_ln711_2_fu_511_p2(8 - 1 downto 0);
    trunc_ln711_3_fu_551_p1 <= lshr_ln711_3_fu_545_p2(8 - 1 downto 0);
    trunc_ln711_4_fu_585_p1 <= lshr_ln711_4_fu_579_p2(8 - 1 downto 0);
    trunc_ln711_fu_449_p1 <= lshr_ln711_fu_443_p2(8 - 1 downto 0);
    trunc_ln712_1_fu_653_p1 <= lshr_ln712_1_fu_647_p2(8 - 1 downto 0);
    trunc_ln712_2_fu_687_p1 <= lshr_ln712_2_fu_681_p2(8 - 1 downto 0);
    trunc_ln712_3_fu_721_p1 <= lshr_ln712_3_fu_715_p2(8 - 1 downto 0);
    trunc_ln712_4_fu_755_p1 <= lshr_ln712_4_fu_749_p2(8 - 1 downto 0);
    trunc_ln712_fu_619_p1 <= lshr_ln712_fu_613_p2(8 - 1 downto 0);
    xor_ln710_fu_375_p2 <= (shl_ln_fu_351_p3 xor ap_const_lv7_7F);
    zext_ln710_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln710_1_fu_389_p3),128));
end behav;
