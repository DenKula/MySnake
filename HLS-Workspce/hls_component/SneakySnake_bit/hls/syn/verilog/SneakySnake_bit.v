// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SneakySnake_bit_SneakySnake_bit,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=11.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.511286,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1147,HLS_SYN_LUT=34232,HLS_VERSION=2024_2}" *)

module SneakySnake_bit (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
wire    ap_continue;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln709_fu_610_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
reg    ap_loop_exit_ready_delayed;
wire   [31:0] ReadLength;
wire   [255:0] ReadSeq;
wire   [255:0] RefSeq;
wire   [31:0] EditThreshold;
wire   [31:0] KmerSize;
reg   [31:0] ap_return;
wire   [7:0] and_ln712_fu_258_p2;
reg   [7:0] and_ln712_reg_653;
wire   [7:0] and_ln713_fu_292_p2;
reg   [7:0] and_ln713_reg_658;
wire   [7:0] and_ln713_1_fu_326_p2;
reg   [7:0] and_ln713_1_reg_663;
wire   [7:0] and_ln713_2_fu_360_p2;
reg   [7:0] and_ln713_2_reg_668;
wire   [7:0] and_ln713_3_fu_394_p2;
reg   [7:0] and_ln713_3_reg_673;
wire   [7:0] and_ln713_4_fu_428_p2;
reg   [7:0] and_ln713_4_reg_678;
wire   [7:0] and_ln714_fu_462_p2;
reg   [7:0] and_ln714_reg_683;
wire   [7:0] and_ln714_1_fu_496_p2;
reg   [7:0] and_ln714_1_reg_688;
wire   [7:0] and_ln714_2_fu_530_p2;
reg   [7:0] and_ln714_2_reg_693;
wire   [7:0] and_ln714_3_fu_564_p2;
reg   [7:0] and_ln714_3_reg_698;
wire   [7:0] and_ln714_4_fu_598_p2;
reg   [7:0] and_ln714_4_reg_703;
wire    call_ret_NeighborhoodMap_bit_fu_106_ap_ready;
wire   [254:0] call_ret_NeighborhoodMap_bit_fu_106_DNA_ref_val;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_0;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_1;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_2;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_3;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_4;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_5;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_6;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_7;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_8;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_9;
wire   [127:0] call_ret_NeighborhoodMap_bit_fu_106_ap_return_10;
wire   [1:0] grp_after_neighbohood_fu_113_ap_return;
reg    grp_after_neighbohood_fu_113_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call66;
reg    ap_block_pp0_stage0_11001_ignoreCallOp114;
wire    ap_block_pp0_stage0_ignoreCallOp33;
wire    ap_block_pp0_stage0_ignoreCallOp114;
reg   [3:0] i1_fu_86;
wire   [3:0] i_fu_604_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i1_load;
wire    ap_block_pp0_stage0;
reg   [1:0] global_count2_fu_90;
wire   [1:0] global_count_fu_624_p2;
wire   [6:0] shl_ln_fu_190_p3;
wire   [0:0] icmp_ln712_fu_198_p2;
reg   [127:0] tmp_fu_204_p4;
wire   [6:0] xor_ln712_fu_214_p2;
wire   [6:0] select_ln712_1_fu_228_p3;
wire   [127:0] select_ln712_fu_220_p3;
wire   [127:0] zext_ln712_fu_236_p1;
wire   [127:0] lshr_ln712_fu_240_p2;
wire   [7:0] trunc_ln712_fu_246_p1;
wire   [7:0] select_ln712_2_fu_250_p3;
reg   [127:0] tmp_7_fu_264_p4;
wire   [127:0] select_ln713_fu_274_p3;
wire   [127:0] lshr_ln713_fu_282_p2;
wire   [7:0] trunc_ln713_fu_288_p1;
reg   [127:0] tmp_8_fu_298_p4;
wire   [127:0] select_ln713_1_fu_308_p3;
wire   [127:0] lshr_ln713_1_fu_316_p2;
wire   [7:0] trunc_ln713_1_fu_322_p1;
reg   [127:0] tmp_9_fu_332_p4;
wire   [127:0] select_ln713_2_fu_342_p3;
wire   [127:0] lshr_ln713_2_fu_350_p2;
wire   [7:0] trunc_ln713_2_fu_356_p1;
reg   [127:0] tmp_10_fu_366_p4;
wire   [127:0] select_ln713_3_fu_376_p3;
wire   [127:0] lshr_ln713_3_fu_384_p2;
wire   [7:0] trunc_ln713_3_fu_390_p1;
reg   [127:0] tmp_11_fu_400_p4;
wire   [127:0] select_ln713_4_fu_410_p3;
wire   [127:0] lshr_ln713_4_fu_418_p2;
wire   [7:0] trunc_ln713_4_fu_424_p1;
reg   [127:0] tmp_12_fu_434_p4;
wire   [127:0] select_ln714_fu_444_p3;
wire   [127:0] lshr_ln714_fu_452_p2;
wire   [7:0] trunc_ln714_fu_458_p1;
reg   [127:0] tmp_13_fu_468_p4;
wire   [127:0] select_ln714_1_fu_478_p3;
wire   [127:0] lshr_ln714_1_fu_486_p2;
wire   [7:0] trunc_ln714_1_fu_492_p1;
reg   [127:0] tmp_14_fu_502_p4;
wire   [127:0] select_ln714_2_fu_512_p3;
wire   [127:0] lshr_ln714_2_fu_520_p2;
wire   [7:0] trunc_ln714_2_fu_526_p1;
reg   [127:0] tmp_15_fu_536_p4;
wire   [127:0] select_ln714_3_fu_546_p3;
wire   [127:0] lshr_ln714_3_fu_554_p2;
wire   [7:0] trunc_ln714_3_fu_560_p1;
reg   [127:0] tmp_16_fu_570_p4;
wire   [127:0] select_ln714_4_fu_580_p3;
wire   [127:0] lshr_ln714_4_fu_588_p2;
wire   [7:0] trunc_ln714_4_fu_594_p1;
wire   [31:0] zext_ln719_fu_635_p1;
reg   [31:0] ap_return_preg;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_267;
reg    ap_condition_268;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i1_fu_86 = 4'd0;
#0 global_count2_fu_90 = 2'd0;
#0 ap_return_preg = 32'd0;
end

SneakySnake_bit_NeighborhoodMap_bit call_ret_NeighborhoodMap_bit_fu_106(
    .ap_ready(call_ret_NeighborhoodMap_bit_fu_106_ap_ready),
    .DNA_read_val(ReadSeq),
    .DNA_ref_val(call_ret_NeighborhoodMap_bit_fu_106_DNA_ref_val),
    .ap_return_0(call_ret_NeighborhoodMap_bit_fu_106_ap_return_0),
    .ap_return_1(call_ret_NeighborhoodMap_bit_fu_106_ap_return_1),
    .ap_return_2(call_ret_NeighborhoodMap_bit_fu_106_ap_return_2),
    .ap_return_3(call_ret_NeighborhoodMap_bit_fu_106_ap_return_3),
    .ap_return_4(call_ret_NeighborhoodMap_bit_fu_106_ap_return_4),
    .ap_return_5(call_ret_NeighborhoodMap_bit_fu_106_ap_return_5),
    .ap_return_6(call_ret_NeighborhoodMap_bit_fu_106_ap_return_6),
    .ap_return_7(call_ret_NeighborhoodMap_bit_fu_106_ap_return_7),
    .ap_return_8(call_ret_NeighborhoodMap_bit_fu_106_ap_return_8),
    .ap_return_9(call_ret_NeighborhoodMap_bit_fu_106_ap_return_9),
    .ap_return_10(call_ret_NeighborhoodMap_bit_fu_106_ap_return_10),
    .ap_rst(ap_rst_n_inv)
);

SneakySnake_bit_after_neighbohood grp_after_neighbohood_fu_113(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .DNA_nsh(and_ln712_reg_653),
    .DNA_shl_one(and_ln713_reg_658),
    .DNA_shl_two(and_ln713_1_reg_663),
    .DNA_shl_three(and_ln713_2_reg_668),
    .DNA_shl_four(and_ln713_3_reg_673),
    .DNA_shl_five(and_ln713_4_reg_678),
    .DNA_shr_one(and_ln714_reg_683),
    .DNA_shr_two(and_ln714_1_reg_688),
    .DNA_shr_three(and_ln714_2_reg_693),
    .DNA_shr_four(and_ln714_3_reg_698),
    .DNA_shr_five(and_ln714_4_reg_703),
    .ap_return(grp_after_neighbohood_fu_113_ap_return),
    .ap_ce(grp_after_neighbohood_fu_113_ap_ce)
);

SneakySnake_bit_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .ReadLength(ReadLength),
    .ReadSeq(ReadSeq),
    .RefSeq(RefSeq),
    .EditThreshold(EditThreshold),
    .KmerSize(KmerSize)
);

SneakySnake_bit_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
    end else begin
        if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                        ap_return_preg[1 : 0] <= zext_ln719_fu_635_p1[1 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_267)) begin
            global_count2_fu_90 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            global_count2_fu_90 <= global_count_fu_624_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_268)) begin
        i1_fu_86 <= i_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln712_reg_653 <= and_ln712_fu_258_p2;
        and_ln713_1_reg_663 <= and_ln713_1_fu_326_p2;
        and_ln713_2_reg_668 <= and_ln713_2_fu_360_p2;
        and_ln713_3_reg_673 <= and_ln713_3_fu_394_p2;
        and_ln713_4_reg_678 <= and_ln713_4_fu_428_p2;
        and_ln713_reg_658 <= and_ln713_fu_292_p2;
        and_ln714_1_reg_688 <= and_ln714_1_fu_496_p2;
        and_ln714_2_reg_693 <= and_ln714_2_fu_530_p2;
        and_ln714_3_reg_698 <= and_ln714_3_fu_564_p2;
        and_ln714_4_reg_703 <= and_ln714_4_fu_598_p2;
        and_ln714_reg_683 <= and_ln714_fu_462_p2;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((icmp_ln709_fu_610_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_return = zext_ln719_fu_635_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp114) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_after_neighbohood_fu_113_ap_ce = 1'b1;
    end else begin
        grp_after_neighbohood_fu_113_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln712_fu_258_p2 = (trunc_ln712_fu_246_p1 & select_ln712_2_fu_250_p3);

assign and_ln713_1_fu_326_p2 = (trunc_ln713_1_fu_322_p1 & select_ln712_2_fu_250_p3);

assign and_ln713_2_fu_360_p2 = (trunc_ln713_2_fu_356_p1 & select_ln712_2_fu_250_p3);

assign and_ln713_3_fu_394_p2 = (trunc_ln713_3_fu_390_p1 & select_ln712_2_fu_250_p3);

assign and_ln713_4_fu_428_p2 = (trunc_ln713_4_fu_424_p1 & select_ln712_2_fu_250_p3);

assign and_ln713_fu_292_p2 = (trunc_ln713_fu_288_p1 & select_ln712_2_fu_250_p3);

assign and_ln714_1_fu_496_p2 = (trunc_ln714_1_fu_492_p1 & select_ln712_2_fu_250_p3);

assign and_ln714_2_fu_530_p2 = (trunc_ln714_2_fu_526_p1 & select_ln712_2_fu_250_p3);

assign and_ln714_3_fu_564_p2 = (trunc_ln714_3_fu_560_p1 & select_ln712_2_fu_250_p3);

assign and_ln714_4_fu_598_p2 = (trunc_ln714_4_fu_594_p1 & select_ln712_2_fu_250_p3);

assign and_ln714_fu_462_p2 = (trunc_ln714_fu_458_p1 & select_ln712_2_fu_250_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp114 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0_ignore_call66)));
end

assign ap_block_pp0_stage0_ignoreCallOp114 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp33 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call66 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_condition_267 = ((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_268 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign call_ret_NeighborhoodMap_bit_fu_106_DNA_ref_val = RefSeq[254:0];

assign global_count_fu_624_p2 = (grp_after_neighbohood_fu_113_ap_return + global_count2_fu_90);

assign i_fu_604_p2 = (ap_sig_allocacmp_i1_load + 4'd1);

assign icmp_ln709_fu_610_p2 = ((ap_sig_allocacmp_i1_load == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln712_fu_198_p2 = ((shl_ln_fu_190_p3 != 7'd0) ? 1'b1 : 1'b0);

assign lshr_ln712_fu_240_p2 = select_ln712_fu_220_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln713_1_fu_316_p2 = select_ln713_1_fu_308_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln713_2_fu_350_p2 = select_ln713_2_fu_342_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln713_3_fu_384_p2 = select_ln713_3_fu_376_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln713_4_fu_418_p2 = select_ln713_4_fu_410_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln713_fu_282_p2 = select_ln713_fu_274_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln714_1_fu_486_p2 = select_ln714_1_fu_478_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln714_2_fu_520_p2 = select_ln714_2_fu_512_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln714_3_fu_554_p2 = select_ln714_3_fu_546_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln714_4_fu_588_p2 = select_ln714_4_fu_580_p3 >> zext_ln712_fu_236_p1;

assign lshr_ln714_fu_452_p2 = select_ln714_fu_444_p3 >> zext_ln712_fu_236_p1;

assign select_ln712_1_fu_228_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? xor_ln712_fu_214_p2 : 7'd0);

assign select_ln712_2_fu_250_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? 8'd3 : 8'd255);

assign select_ln712_fu_220_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_fu_204_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_0);

assign select_ln713_1_fu_308_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_8_fu_298_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_2);

assign select_ln713_2_fu_342_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_9_fu_332_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_3);

assign select_ln713_3_fu_376_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_10_fu_366_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_4);

assign select_ln713_4_fu_410_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_11_fu_400_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_5);

assign select_ln713_fu_274_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_7_fu_264_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_1);

assign select_ln714_1_fu_478_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_13_fu_468_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_7);

assign select_ln714_2_fu_512_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_14_fu_502_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_8);

assign select_ln714_3_fu_546_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_15_fu_536_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_9);

assign select_ln714_4_fu_580_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_16_fu_570_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_10);

assign select_ln714_fu_444_p3 = ((icmp_ln712_fu_198_p2[0:0] == 1'b1) ? tmp_12_fu_434_p4 : call_ret_NeighborhoodMap_bit_fu_106_ap_return_6);

assign shl_ln_fu_190_p3 = {{ap_sig_allocacmp_i1_load}, {3'd0}};

integer ap_tvar_int_0;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_4) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_10_fu_366_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_366_p4[ap_tvar_int_0] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_4[127 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_5) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_11_fu_400_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_400_p4[ap_tvar_int_1] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_5[127 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_6) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_12_fu_434_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_12_fu_434_p4[ap_tvar_int_2] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_6[127 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_7) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 127 - 0) begin
            tmp_13_fu_468_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_13_fu_468_p4[ap_tvar_int_3] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_7[127 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_8) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_14_fu_502_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_14_fu_502_p4[ap_tvar_int_4] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_8[127 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_9) begin
    for (ap_tvar_int_5 = 128 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 127 - 0) begin
            tmp_15_fu_536_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_15_fu_536_p4[ap_tvar_int_5] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_9[127 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_10) begin
    for (ap_tvar_int_6 = 128 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 127 - 0) begin
            tmp_16_fu_570_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_16_fu_570_p4[ap_tvar_int_6] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_10[127 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_1) begin
    for (ap_tvar_int_7 = 128 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 127 - 0) begin
            tmp_7_fu_264_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_7_fu_264_p4[ap_tvar_int_7] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_1[127 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_2) begin
    for (ap_tvar_int_8 = 128 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 127 - 0) begin
            tmp_8_fu_298_p4[ap_tvar_int_8] = 1'b0;
        end else begin
            tmp_8_fu_298_p4[ap_tvar_int_8] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_2[127 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_3) begin
    for (ap_tvar_int_9 = 128 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 127 - 0) begin
            tmp_9_fu_332_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            tmp_9_fu_332_p4[ap_tvar_int_9] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_3[127 - ap_tvar_int_9];
        end
    end
end

integer ap_tvar_int_10;

always @ (call_ret_NeighborhoodMap_bit_fu_106_ap_return_0) begin
    for (ap_tvar_int_10 = 128 - 1; ap_tvar_int_10 >= 0; ap_tvar_int_10 = ap_tvar_int_10 - 1) begin
        if (ap_tvar_int_10 > 127 - 0) begin
            tmp_fu_204_p4[ap_tvar_int_10] = 1'b0;
        end else begin
            tmp_fu_204_p4[ap_tvar_int_10] = call_ret_NeighborhoodMap_bit_fu_106_ap_return_0[127 - ap_tvar_int_10];
        end
    end
end

assign trunc_ln712_fu_246_p1 = lshr_ln712_fu_240_p2[7:0];

assign trunc_ln713_1_fu_322_p1 = lshr_ln713_1_fu_316_p2[7:0];

assign trunc_ln713_2_fu_356_p1 = lshr_ln713_2_fu_350_p2[7:0];

assign trunc_ln713_3_fu_390_p1 = lshr_ln713_3_fu_384_p2[7:0];

assign trunc_ln713_4_fu_424_p1 = lshr_ln713_4_fu_418_p2[7:0];

assign trunc_ln713_fu_288_p1 = lshr_ln713_fu_282_p2[7:0];

assign trunc_ln714_1_fu_492_p1 = lshr_ln714_1_fu_486_p2[7:0];

assign trunc_ln714_2_fu_526_p1 = lshr_ln714_2_fu_520_p2[7:0];

assign trunc_ln714_3_fu_560_p1 = lshr_ln714_3_fu_554_p2[7:0];

assign trunc_ln714_4_fu_594_p1 = lshr_ln714_4_fu_588_p2[7:0];

assign trunc_ln714_fu_458_p1 = lshr_ln714_fu_452_p2[7:0];

assign xor_ln712_fu_214_p2 = (shl_ln_fu_190_p3 ^ 7'd127);

assign zext_ln712_fu_236_p1 = select_ln712_1_fu_228_p3;

assign zext_ln719_fu_635_p1 = global_count_fu_624_p2;

always @ (posedge ap_clk) begin
    ap_return_preg[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //SneakySnake_bit
