// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc (
        ap_continue,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_continue;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read;
input  [127:0] p_read1;
input  [127:0] p_read2;
input  [127:0] p_read3;
input  [127:0] p_read4;
input  [127:0] p_read5;
input  [127:0] p_read6;
input  [127:0] p_read7;
input  [127:0] p_read8;
input  [127:0] p_read9;
input  [127:0] p_read10;
output  [1:0] ap_return;

reg ap_idle;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln709_fu_590_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
reg    ap_loop_exit_ready_delayed;
wire   [7:0] and_ln712_fu_238_p2;
reg   [7:0] and_ln712_reg_629;
wire   [7:0] and_ln713_fu_272_p2;
reg   [7:0] and_ln713_reg_634;
wire   [7:0] and_ln713_1_fu_306_p2;
reg   [7:0] and_ln713_1_reg_639;
wire   [7:0] and_ln713_2_fu_340_p2;
reg   [7:0] and_ln713_2_reg_644;
wire   [7:0] and_ln713_3_fu_374_p2;
reg   [7:0] and_ln713_3_reg_649;
wire   [7:0] and_ln713_4_fu_408_p2;
reg   [7:0] and_ln713_4_reg_654;
wire   [7:0] and_ln714_fu_442_p2;
reg   [7:0] and_ln714_reg_659;
wire   [7:0] and_ln714_1_fu_476_p2;
reg   [7:0] and_ln714_1_reg_664;
wire   [7:0] and_ln714_2_fu_510_p2;
reg   [7:0] and_ln714_2_reg_669;
wire   [7:0] and_ln714_3_fu_544_p2;
reg   [7:0] and_ln714_3_reg_674;
wire   [7:0] and_ln714_4_fu_578_p2;
reg   [7:0] and_ln714_4_reg_679;
wire   [1:0] grp_after_neighbohood_fu_142_ap_return;
reg    grp_after_neighbohood_fu_142_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call66;
reg    ap_block_pp0_stage0_11001_ignoreCallOp91;
wire    ap_block_pp0_stage0_ignoreCallOp91;
reg   [3:0] i1_fu_68;
wire   [3:0] i_fu_584_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i1_load;
wire    ap_block_pp0_stage0;
reg   [1:0] global_count2_fu_72;
wire   [1:0] global_count_fu_604_p2;
wire   [6:0] shl_ln_fu_170_p3;
wire   [0:0] icmp_ln712_fu_178_p2;
reg   [127:0] tmp_fu_184_p4;
wire   [6:0] xor_ln712_fu_194_p2;
wire   [6:0] select_ln712_1_fu_208_p3;
wire   [127:0] select_ln712_fu_200_p3;
wire   [127:0] zext_ln712_fu_216_p1;
wire   [127:0] lshr_ln712_fu_220_p2;
wire   [7:0] trunc_ln712_fu_226_p1;
wire   [7:0] select_ln712_2_fu_230_p3;
reg   [127:0] tmp_7_fu_244_p4;
wire   [127:0] select_ln713_fu_254_p3;
wire   [127:0] lshr_ln713_fu_262_p2;
wire   [7:0] trunc_ln713_fu_268_p1;
reg   [127:0] tmp_8_fu_278_p4;
wire   [127:0] select_ln713_1_fu_288_p3;
wire   [127:0] lshr_ln713_1_fu_296_p2;
wire   [7:0] trunc_ln713_1_fu_302_p1;
reg   [127:0] tmp_9_fu_312_p4;
wire   [127:0] select_ln713_2_fu_322_p3;
wire   [127:0] lshr_ln713_2_fu_330_p2;
wire   [7:0] trunc_ln713_2_fu_336_p1;
reg   [127:0] tmp_10_fu_346_p4;
wire   [127:0] select_ln713_3_fu_356_p3;
wire   [127:0] lshr_ln713_3_fu_364_p2;
wire   [7:0] trunc_ln713_3_fu_370_p1;
reg   [127:0] tmp_11_fu_380_p4;
wire   [127:0] select_ln713_4_fu_390_p3;
wire   [127:0] lshr_ln713_4_fu_398_p2;
wire   [7:0] trunc_ln713_4_fu_404_p1;
reg   [127:0] tmp_12_fu_414_p4;
wire   [127:0] select_ln714_fu_424_p3;
wire   [127:0] lshr_ln714_fu_432_p2;
wire   [7:0] trunc_ln714_fu_438_p1;
reg   [127:0] tmp_13_fu_448_p4;
wire   [127:0] select_ln714_1_fu_458_p3;
wire   [127:0] lshr_ln714_1_fu_466_p2;
wire   [7:0] trunc_ln714_1_fu_472_p1;
reg   [127:0] tmp_14_fu_482_p4;
wire   [127:0] select_ln714_2_fu_492_p3;
wire   [127:0] lshr_ln714_2_fu_500_p2;
wire   [7:0] trunc_ln714_2_fu_506_p1;
reg   [127:0] tmp_15_fu_516_p4;
wire   [127:0] select_ln714_3_fu_526_p3;
wire   [127:0] lshr_ln714_3_fu_534_p2;
wire   [7:0] trunc_ln714_3_fu_540_p1;
reg   [127:0] tmp_16_fu_550_p4;
wire   [127:0] select_ln714_4_fu_560_p3;
wire   [127:0] lshr_ln714_4_fu_568_p2;
wire   [7:0] trunc_ln714_4_fu_574_p1;
reg   [1:0] ap_return_preg;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_210;
reg    ap_condition_212;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i1_fu_68 = 4'd0;
#0 global_count2_fu_72 = 2'd0;
#0 ap_return_preg = 2'd0;
end

SneakySnake_bit_after_neighbohood grp_after_neighbohood_fu_142(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .DNA_nsh(and_ln712_reg_629),
    .DNA_shl_one(and_ln713_reg_634),
    .DNA_shl_two(and_ln713_1_reg_639),
    .DNA_shl_three(and_ln713_2_reg_644),
    .DNA_shl_four(and_ln713_3_reg_649),
    .DNA_shl_five(and_ln713_4_reg_654),
    .DNA_shr_one(and_ln714_reg_659),
    .DNA_shr_two(and_ln714_1_reg_664),
    .DNA_shr_three(and_ln714_2_reg_669),
    .DNA_shr_four(and_ln714_3_reg_674),
    .DNA_shr_five(and_ln714_4_reg_679),
    .ap_return(grp_after_neighbohood_fu_142_ap_return),
    .ap_ce(grp_after_neighbohood_fu_142_ap_ce)
);

SneakySnake_bit_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_return_preg <= global_count_fu_604_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_210)) begin
            global_count2_fu_72 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            global_count2_fu_72 <= global_count_fu_604_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_212)) begin
        i1_fu_68 <= i_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln712_reg_629 <= and_ln712_fu_238_p2;
        and_ln713_1_reg_639 <= and_ln713_1_fu_306_p2;
        and_ln713_2_reg_644 <= and_ln713_2_fu_340_p2;
        and_ln713_3_reg_649 <= and_ln713_3_fu_374_p2;
        and_ln713_4_reg_654 <= and_ln713_4_fu_408_p2;
        and_ln713_reg_634 <= and_ln713_fu_272_p2;
        and_ln714_1_reg_664 <= and_ln714_1_fu_476_p2;
        and_ln714_2_reg_669 <= and_ln714_2_fu_510_p2;
        and_ln714_3_reg_674 <= and_ln714_3_fu_544_p2;
        and_ln714_4_reg_679 <= and_ln714_4_fu_578_p2;
        and_ln714_reg_659 <= and_ln714_fu_442_p2;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((icmp_ln709_fu_590_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_return = global_count_fu_604_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp91) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_after_neighbohood_fu_142_ap_ce = 1'b1;
    end else begin
        grp_after_neighbohood_fu_142_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln712_fu_238_p2 = (trunc_ln712_fu_226_p1 & select_ln712_2_fu_230_p3);

assign and_ln713_1_fu_306_p2 = (trunc_ln713_1_fu_302_p1 & select_ln712_2_fu_230_p3);

assign and_ln713_2_fu_340_p2 = (trunc_ln713_2_fu_336_p1 & select_ln712_2_fu_230_p3);

assign and_ln713_3_fu_374_p2 = (trunc_ln713_3_fu_370_p1 & select_ln712_2_fu_230_p3);

assign and_ln713_4_fu_408_p2 = (trunc_ln713_4_fu_404_p1 & select_ln712_2_fu_230_p3);

assign and_ln713_fu_272_p2 = (trunc_ln713_fu_268_p1 & select_ln712_2_fu_230_p3);

assign and_ln714_1_fu_476_p2 = (trunc_ln714_1_fu_472_p1 & select_ln712_2_fu_230_p3);

assign and_ln714_2_fu_510_p2 = (trunc_ln714_2_fu_506_p1 & select_ln712_2_fu_230_p3);

assign and_ln714_3_fu_544_p2 = (trunc_ln714_3_fu_540_p1 & select_ln712_2_fu_230_p3);

assign and_ln714_4_fu_578_p2 = (trunc_ln714_4_fu_574_p1 & select_ln712_2_fu_230_p3);

assign and_ln714_fu_442_p2 = (trunc_ln714_fu_438_p1 & select_ln712_2_fu_230_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp91 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0_ignore_call66)));
end

assign ap_block_pp0_stage0_ignoreCallOp91 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call66 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_condition_210 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1));
end

always @ (*) begin
    ap_condition_212 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign global_count_fu_604_p2 = (grp_after_neighbohood_fu_142_ap_return + global_count2_fu_72);

assign i_fu_584_p2 = (ap_sig_allocacmp_i1_load + 4'd1);

assign icmp_ln709_fu_590_p2 = ((ap_sig_allocacmp_i1_load == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln712_fu_178_p2 = ((shl_ln_fu_170_p3 != 7'd0) ? 1'b1 : 1'b0);

assign lshr_ln712_fu_220_p2 = select_ln712_fu_200_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln713_1_fu_296_p2 = select_ln713_1_fu_288_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln713_2_fu_330_p2 = select_ln713_2_fu_322_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln713_3_fu_364_p2 = select_ln713_3_fu_356_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln713_4_fu_398_p2 = select_ln713_4_fu_390_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln713_fu_262_p2 = select_ln713_fu_254_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln714_1_fu_466_p2 = select_ln714_1_fu_458_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln714_2_fu_500_p2 = select_ln714_2_fu_492_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln714_3_fu_534_p2 = select_ln714_3_fu_526_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln714_4_fu_568_p2 = select_ln714_4_fu_560_p3 >> zext_ln712_fu_216_p1;

assign lshr_ln714_fu_432_p2 = select_ln714_fu_424_p3 >> zext_ln712_fu_216_p1;

assign select_ln712_1_fu_208_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? xor_ln712_fu_194_p2 : 7'd0);

assign select_ln712_2_fu_230_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? 8'd3 : 8'd255);

assign select_ln712_fu_200_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_fu_184_p4 : p_read);

assign select_ln713_1_fu_288_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_8_fu_278_p4 : p_read2);

assign select_ln713_2_fu_322_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_9_fu_312_p4 : p_read3);

assign select_ln713_3_fu_356_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_10_fu_346_p4 : p_read4);

assign select_ln713_4_fu_390_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_11_fu_380_p4 : p_read5);

assign select_ln713_fu_254_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_7_fu_244_p4 : p_read1);

assign select_ln714_1_fu_458_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_13_fu_448_p4 : p_read7);

assign select_ln714_2_fu_492_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_14_fu_482_p4 : p_read8);

assign select_ln714_3_fu_526_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_15_fu_516_p4 : p_read9);

assign select_ln714_4_fu_560_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_16_fu_550_p4 : p_read10);

assign select_ln714_fu_424_p3 = ((icmp_ln712_fu_178_p2[0:0] == 1'b1) ? tmp_12_fu_414_p4 : p_read6);

assign shl_ln_fu_170_p3 = {{ap_sig_allocacmp_i1_load}, {3'd0}};

integer ap_tvar_int_0;

always @ (p_read4) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_10_fu_346_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_346_p4[ap_tvar_int_0] = p_read4[127 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_read5) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_11_fu_380_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_380_p4[ap_tvar_int_1] = p_read5[127 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_read6) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_12_fu_414_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_12_fu_414_p4[ap_tvar_int_2] = p_read6[127 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_read7) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 127 - 0) begin
            tmp_13_fu_448_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_13_fu_448_p4[ap_tvar_int_3] = p_read7[127 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (p_read8) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_14_fu_482_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_14_fu_482_p4[ap_tvar_int_4] = p_read8[127 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (p_read9) begin
    for (ap_tvar_int_5 = 128 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 127 - 0) begin
            tmp_15_fu_516_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_15_fu_516_p4[ap_tvar_int_5] = p_read9[127 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (p_read10) begin
    for (ap_tvar_int_6 = 128 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 127 - 0) begin
            tmp_16_fu_550_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_16_fu_550_p4[ap_tvar_int_6] = p_read10[127 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (p_read1) begin
    for (ap_tvar_int_7 = 128 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 127 - 0) begin
            tmp_7_fu_244_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_7_fu_244_p4[ap_tvar_int_7] = p_read1[127 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (p_read2) begin
    for (ap_tvar_int_8 = 128 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 127 - 0) begin
            tmp_8_fu_278_p4[ap_tvar_int_8] = 1'b0;
        end else begin
            tmp_8_fu_278_p4[ap_tvar_int_8] = p_read2[127 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (p_read3) begin
    for (ap_tvar_int_9 = 128 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 127 - 0) begin
            tmp_9_fu_312_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            tmp_9_fu_312_p4[ap_tvar_int_9] = p_read3[127 - ap_tvar_int_9];
        end
    end
end

integer ap_tvar_int_10;

always @ (p_read) begin
    for (ap_tvar_int_10 = 128 - 1; ap_tvar_int_10 >= 0; ap_tvar_int_10 = ap_tvar_int_10 - 1) begin
        if (ap_tvar_int_10 > 127 - 0) begin
            tmp_fu_184_p4[ap_tvar_int_10] = 1'b0;
        end else begin
            tmp_fu_184_p4[ap_tvar_int_10] = p_read[127 - ap_tvar_int_10];
        end
    end
end

assign trunc_ln712_fu_226_p1 = lshr_ln712_fu_220_p2[7:0];

assign trunc_ln713_1_fu_302_p1 = lshr_ln713_1_fu_296_p2[7:0];

assign trunc_ln713_2_fu_336_p1 = lshr_ln713_2_fu_330_p2[7:0];

assign trunc_ln713_3_fu_370_p1 = lshr_ln713_3_fu_364_p2[7:0];

assign trunc_ln713_4_fu_404_p1 = lshr_ln713_4_fu_398_p2[7:0];

assign trunc_ln713_fu_268_p1 = lshr_ln713_fu_262_p2[7:0];

assign trunc_ln714_1_fu_472_p1 = lshr_ln714_1_fu_466_p2[7:0];

assign trunc_ln714_2_fu_506_p1 = lshr_ln714_2_fu_500_p2[7:0];

assign trunc_ln714_3_fu_540_p1 = lshr_ln714_3_fu_534_p2[7:0];

assign trunc_ln714_4_fu_574_p1 = lshr_ln714_4_fu_568_p2[7:0];

assign trunc_ln714_fu_438_p1 = lshr_ln714_fu_432_p2[7:0];

assign xor_ln712_fu_194_p2 = (shl_ln_fu_170_p3 ^ 7'd127);

assign zext_ln712_fu_216_p1 = select_ln712_1_fu_208_p3;

endmodule //SneakySnake_bit_Loop_VITIS_LOOP_709_1_proc
