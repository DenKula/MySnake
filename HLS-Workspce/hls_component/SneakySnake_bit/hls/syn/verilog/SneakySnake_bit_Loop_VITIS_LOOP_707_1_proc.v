// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SneakySnake_bit_Loop_VITIS_LOOP_707_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] p_read;
input  [127:0] p_read1;
input  [127:0] p_read2;
input  [127:0] p_read3;
input  [127:0] p_read4;
input  [127:0] p_read5;
input  [127:0] p_read6;
input  [127:0] p_read7;
input  [127:0] p_read8;
input  [127:0] p_read9;
input  [127:0] p_read10;
output  [1:0] ap_return;

reg ap_idle;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln707_fu_797_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg   [0:0] icmp_ln64020_reg_218;
reg   [0:0] icmp_ln64020_reg_218_pp0_iter1_reg;
wire   [0:0] or_ln706_fu_337_p2;
reg   [0:0] or_ln706_reg_1393;
wire   [7:0] DNA_nsh_fu_419_p2;
reg   [7:0] DNA_nsh_reg_1397;
wire   [7:0] DNA_shl_one_fu_453_p2;
reg   [7:0] DNA_shl_one_reg_1402;
wire   [7:0] DNA_shl_two_fu_487_p2;
reg   [7:0] DNA_shl_two_reg_1407;
wire   [7:0] DNA_shl_three_fu_521_p2;
reg   [7:0] DNA_shl_three_reg_1412;
wire   [7:0] DNA_shl_four_fu_555_p2;
reg   [7:0] DNA_shl_four_reg_1417;
wire   [7:0] DNA_shl_five_fu_589_p2;
reg   [7:0] DNA_shl_five_reg_1422;
wire   [7:0] DNA_shr_one_fu_623_p2;
reg   [7:0] DNA_shr_one_reg_1427;
wire   [7:0] DNA_shr_two_fu_657_p2;
reg   [7:0] DNA_shr_two_reg_1432;
wire   [7:0] DNA_shr_three_fu_691_p2;
reg   [7:0] DNA_shr_three_reg_1437;
wire   [7:0] DNA_shr_four_fu_725_p2;
reg   [7:0] DNA_shr_four_reg_1442;
wire   [7:0] DNA_shr_five_fu_759_p2;
reg   [7:0] DNA_shr_five_reg_1447;
wire   [0:0] icmp_ln640_fu_785_p2;
reg   [0:0] icmp_ln640_reg_1452;
reg   [0:0] icmp_ln707_reg_1457;
reg   [7:0] p_val2240_i_i10_load_reg_1461;
reg   [7:0] p_val2138_i_i11_load_reg_1466;
reg   [7:0] p_val2036_i_i12_load_reg_1471;
reg   [7:0] p_val1934_i_i13_load_reg_1476;
reg   [7:0] p_val1832_i_i14_load_reg_1481;
reg   [7:0] p_val1730_i_i15_load_reg_1486;
reg   [7:0] p_val1628_i_i16_load_reg_1491;
reg   [7:0] p_val26_i_i17_load_reg_1496;
wire   [3:0] max_10_fu_989_p3;
reg   [3:0] max_10_reg_1501;
wire    max_count_one_bit_fu_240_ap_ready;
wire   [3:0] max_count_one_bit_fu_240_ap_return;
wire    tmp_8_i_i_count_one_bit_fu_245_ap_ready;
wire   [3:0] tmp_8_i_i_count_one_bit_fu_245_ap_return;
wire    max_2_count_one_bit_fu_250_ap_ready;
wire   [3:0] max_2_count_one_bit_fu_250_ap_return;
wire    tmp_i_i_count_one_bit_fu_255_ap_ready;
wire   [3:0] tmp_i_i_count_one_bit_fu_255_ap_return;
wire    max_5_count_one_bit_fu_260_ap_ready;
wire   [3:0] max_5_count_one_bit_fu_260_ap_return;
wire    tmp_1_i_i_count_one_bit_fu_265_ap_ready;
wire   [3:0] tmp_1_i_i_count_one_bit_fu_265_ap_return;
wire    max_8_count_one_bit_fu_270_ap_ready;
wire   [3:0] max_8_count_one_bit_fu_270_ap_return;
wire    tmp_2_i_i_count_one_bit_fu_275_ap_ready;
wire   [3:0] tmp_2_i_i_count_one_bit_fu_275_ap_return;
wire    max_12_count_one_bit_fu_280_ap_ready;
wire   [3:0] max_12_count_one_bit_fu_280_ap_return;
wire    tmp_3_i_i_count_one_bit_fu_285_ap_ready;
wire   [3:0] tmp_3_i_i_count_one_bit_fu_285_ap_return;
wire    max_11_count_one_bit_fu_290_ap_ready;
wire   [3:0] max_11_count_one_bit_fu_290_ap_return;
reg   [0:0] ap_phi_mux_icmp_ln64020_phi_fu_221_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_first_iter_06_phi_fu_232_p4;
wire    ap_block_pp0_stage0_ignoreCallOp143;
wire    ap_block_pp0_stage0_ignoreCallOp144;
wire    ap_block_pp0_stage0_ignoreCallOp145;
wire    ap_block_pp0_stage0_ignoreCallOp146;
wire    ap_block_pp0_stage0_ignoreCallOp147;
wire    ap_block_pp0_stage0_ignoreCallOp148;
wire    ap_block_pp0_stage0_ignoreCallOp149;
wire    ap_block_pp0_stage0_ignoreCallOp150;
wire    ap_block_pp0_stage0_ignoreCallOp175;
wire    ap_block_pp0_stage0_ignoreCallOp176;
wire    ap_block_pp0_stage0_ignoreCallOp177;
reg   [5:0] indvar_flatten1_fu_80;
wire   [5:0] add_ln707_fu_765_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten1_load;
reg   [3:0] i2_fu_84;
wire   [3:0] i_10_fu_343_p3;
reg   [3:0] ap_sig_allocacmp_i2_load;
reg   [1:0] global_count3_fu_88;
wire   [1:0] global_count_2_fu_1003_p3;
reg   [1:0] global_count_2125_fu_92;
wire   [1:0] global_count_fu_1192_p2;
reg   [1:0] iter18_fu_96;
wire   [1:0] iter_fu_777_p3;
reg   [1:0] ap_sig_allocacmp_iter18_load;
reg   [1:0] global_count_319_fu_100;
wire   [1:0] global_count_3_fu_1084_p2;
reg   [3:0] i_2221_fu_104;
wire   [3:0] i_fu_791_p2;
reg   [3:0] ap_sig_allocacmp_i_2221_load;
reg   [7:0] p_val2546_i_i7_fu_108;
wire   [7:0] shl_ln673_fu_1186_p2;
reg   [7:0] p_val2444_i_i8_fu_112;
wire   [7:0] shl_ln672_fu_1176_p2;
reg   [7:0] p_val2342_i_i9_fu_116;
wire   [7:0] shl_ln671_fu_1166_p2;
reg   [7:0] p_val2240_i_i10_fu_120;
wire   [7:0] shl_ln670_fu_1157_p2;
reg   [7:0] ap_sig_allocacmp_p_val2240_i_i10_load;
reg   [7:0] p_val2138_i_i11_fu_124;
wire   [7:0] shl_ln669_fu_1148_p2;
reg   [7:0] ap_sig_allocacmp_p_val2138_i_i11_load;
reg   [7:0] p_val2036_i_i12_fu_128;
wire   [7:0] shl_ln668_fu_1139_p2;
reg   [7:0] ap_sig_allocacmp_p_val2036_i_i12_load;
reg   [7:0] p_val1934_i_i13_fu_132;
wire   [7:0] shl_ln667_fu_1130_p2;
reg   [7:0] ap_sig_allocacmp_p_val1934_i_i13_load;
reg   [7:0] p_val1832_i_i14_fu_136;
wire   [7:0] shl_ln666_fu_1121_p2;
reg   [7:0] ap_sig_allocacmp_p_val1832_i_i14_load;
reg   [7:0] p_val1730_i_i15_fu_140;
wire   [7:0] shl_ln665_fu_1112_p2;
reg   [7:0] ap_sig_allocacmp_p_val1730_i_i15_load;
reg   [7:0] p_val1628_i_i16_fu_144;
wire   [7:0] shl_ln664_fu_1103_p2;
reg   [7:0] ap_sig_allocacmp_p_val1628_i_i16_load;
reg   [7:0] p_val26_i_i17_fu_148;
wire   [7:0] shl_ln663_fu_1094_p2;
reg   [7:0] ap_sig_allocacmp_p_val26_i_i17_load;
wire   [6:0] shl_ln_fu_351_p3;
wire   [0:0] icmp_ln710_fu_359_p2;
reg   [127:0] tmp_fu_365_p4;
wire   [6:0] xor_ln710_fu_375_p2;
wire   [6:0] select_ln710_1_fu_389_p3;
wire   [127:0] select_ln710_fu_381_p3;
wire   [127:0] zext_ln710_fu_397_p1;
wire   [127:0] lshr_ln710_fu_401_p2;
wire   [7:0] trunc_ln710_fu_407_p1;
wire   [7:0] select_ln710_2_fu_411_p3;
reg   [127:0] tmp_7_fu_425_p4;
wire   [127:0] select_ln711_fu_435_p3;
wire   [127:0] lshr_ln711_fu_443_p2;
wire   [7:0] trunc_ln711_fu_449_p1;
reg   [127:0] tmp_8_fu_459_p4;
wire   [127:0] select_ln711_1_fu_469_p3;
wire   [127:0] lshr_ln711_1_fu_477_p2;
wire   [7:0] trunc_ln711_1_fu_483_p1;
reg   [127:0] tmp_9_fu_493_p4;
wire   [127:0] select_ln711_2_fu_503_p3;
wire   [127:0] lshr_ln711_2_fu_511_p2;
wire   [7:0] trunc_ln711_2_fu_517_p1;
reg   [127:0] tmp_10_fu_527_p4;
wire   [127:0] select_ln711_3_fu_537_p3;
wire   [127:0] lshr_ln711_3_fu_545_p2;
wire   [7:0] trunc_ln711_3_fu_551_p1;
reg   [127:0] tmp_11_fu_561_p4;
wire   [127:0] select_ln711_4_fu_571_p3;
wire   [127:0] lshr_ln711_4_fu_579_p2;
wire   [7:0] trunc_ln711_4_fu_585_p1;
reg   [127:0] tmp_12_fu_595_p4;
wire   [127:0] select_ln712_fu_605_p3;
wire   [127:0] lshr_ln712_fu_613_p2;
wire   [7:0] trunc_ln712_fu_619_p1;
reg   [127:0] tmp_13_fu_629_p4;
wire   [127:0] select_ln712_1_fu_639_p3;
wire   [127:0] lshr_ln712_1_fu_647_p2;
wire   [7:0] trunc_ln712_1_fu_653_p1;
reg   [127:0] tmp_14_fu_663_p4;
wire   [127:0] select_ln712_2_fu_673_p3;
wire   [127:0] lshr_ln712_2_fu_681_p2;
wire   [7:0] trunc_ln712_2_fu_687_p1;
reg   [127:0] tmp_15_fu_697_p4;
wire   [127:0] select_ln712_3_fu_707_p3;
wire   [127:0] lshr_ln712_3_fu_715_p2;
wire   [7:0] trunc_ln712_3_fu_721_p1;
reg   [127:0] tmp_16_fu_731_p4;
wire   [127:0] select_ln712_4_fu_741_p3;
wire   [127:0] lshr_ln712_4_fu_749_p2;
wire   [7:0] trunc_ln712_4_fu_755_p1;
wire   [1:0] add_ln640_fu_771_p2;
wire   [0:0] icmp_ln318_fu_899_p2;
wire   [3:0] max_1_fu_905_p3;
wire   [0:0] icmp_ln318_1_fu_913_p2;
wire   [3:0] max_3_fu_919_p3;
wire   [0:0] icmp_ln318_2_fu_927_p2;
wire   [3:0] max_4_fu_933_p3;
wire   [0:0] icmp_ln318_3_fu_941_p2;
wire   [3:0] max_6_fu_947_p3;
wire   [0:0] icmp_ln318_4_fu_955_p2;
wire   [3:0] max_7_fu_961_p3;
wire   [0:0] icmp_ln318_5_fu_969_p2;
wire   [3:0] max_9_fu_975_p3;
wire   [0:0] icmp_ln318_6_fu_983_p2;
wire   [0:0] icmp_ln318_7_fu_1026_p2;
wire   [3:0] max_13_fu_1031_p3;
wire   [0:0] icmp_ln318_8_fu_1038_p2;
wire   [3:0] max_14_fu_1044_p3;
wire   [0:0] icmp_ln318_9_fu_1052_p2;
wire   [3:0] max_16_fu_1058_p3;
wire   [1:0] trunc_ln658_fu_1066_p1;
wire   [1:0] select_ln706_fu_1076_p3;
wire   [1:0] add_ln658_fu_1070_p2;
wire   [7:0] max_16cast_fu_1090_p1;
wire   [7:0] max_16cast159_fu_1099_p1;
wire   [7:0] max_16cast160_fu_1108_p1;
wire   [7:0] max_16cast161_fu_1117_p1;
wire   [7:0] max_16cast162_fu_1126_p1;
wire   [7:0] max_16cast163_fu_1135_p1;
wire   [7:0] max_16cast164_fu_1144_p1;
wire   [7:0] max_16cast165_fu_1153_p1;
wire   [7:0] max_16cast166_fu_1162_p1;
wire   [7:0] max_16cast167_fu_1172_p1;
wire   [7:0] max_16cast168_fu_1182_p1;
reg   [1:0] ap_return_preg;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_864;
reg    ap_condition_867;
reg    ap_condition_283;
reg    ap_condition_148;
reg    ap_condition_877;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 indvar_flatten1_fu_80 = 6'd0;
#0 i2_fu_84 = 4'd0;
#0 global_count3_fu_88 = 2'd0;
#0 global_count_2125_fu_92 = 2'd0;
#0 iter18_fu_96 = 2'd0;
#0 global_count_319_fu_100 = 2'd0;
#0 i_2221_fu_104 = 4'd0;
#0 p_val2546_i_i7_fu_108 = 8'd0;
#0 p_val2444_i_i8_fu_112 = 8'd0;
#0 p_val2342_i_i9_fu_116 = 8'd0;
#0 p_val2240_i_i10_fu_120 = 8'd0;
#0 p_val2138_i_i11_fu_124 = 8'd0;
#0 p_val2036_i_i12_fu_128 = 8'd0;
#0 p_val1934_i_i13_fu_132 = 8'd0;
#0 p_val1832_i_i14_fu_136 = 8'd0;
#0 p_val1730_i_i15_fu_140 = 8'd0;
#0 p_val1628_i_i16_fu_144 = 8'd0;
#0 p_val26_i_i17_fu_148 = 8'd0;
#0 ap_return_preg = 2'd0;
end

SneakySnake_bit_count_one_bit max_count_one_bit_fu_240(
    .ap_ready(max_count_one_bit_fu_240_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val26_i_i17_load),
    .ap_return(max_count_one_bit_fu_240_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit tmp_8_i_i_count_one_bit_fu_245(
    .ap_ready(tmp_8_i_i_count_one_bit_fu_245_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val1628_i_i16_load),
    .ap_return(tmp_8_i_i_count_one_bit_fu_245_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit max_2_count_one_bit_fu_250(
    .ap_ready(max_2_count_one_bit_fu_250_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val1730_i_i15_load),
    .ap_return(max_2_count_one_bit_fu_250_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit tmp_i_i_count_one_bit_fu_255(
    .ap_ready(tmp_i_i_count_one_bit_fu_255_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val1832_i_i14_load),
    .ap_return(tmp_i_i_count_one_bit_fu_255_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit max_5_count_one_bit_fu_260(
    .ap_ready(max_5_count_one_bit_fu_260_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val1934_i_i13_load),
    .ap_return(max_5_count_one_bit_fu_260_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit tmp_1_i_i_count_one_bit_fu_265(
    .ap_ready(tmp_1_i_i_count_one_bit_fu_265_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val2036_i_i12_load),
    .ap_return(tmp_1_i_i_count_one_bit_fu_265_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit max_8_count_one_bit_fu_270(
    .ap_ready(max_8_count_one_bit_fu_270_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val2138_i_i11_load),
    .ap_return(max_8_count_one_bit_fu_270_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit tmp_2_i_i_count_one_bit_fu_275(
    .ap_ready(tmp_2_i_i_count_one_bit_fu_275_ap_ready),
    .input_seq_val(ap_sig_allocacmp_p_val2240_i_i10_load),
    .ap_return(tmp_2_i_i_count_one_bit_fu_275_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit max_12_count_one_bit_fu_280(
    .ap_ready(max_12_count_one_bit_fu_280_ap_ready),
    .input_seq_val(p_val2342_i_i9_fu_116),
    .ap_return(max_12_count_one_bit_fu_280_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit tmp_3_i_i_count_one_bit_fu_285(
    .ap_ready(tmp_3_i_i_count_one_bit_fu_285_ap_ready),
    .input_seq_val(p_val2444_i_i8_fu_112),
    .ap_return(tmp_3_i_i_count_one_bit_fu_285_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_count_one_bit max_11_count_one_bit_fu_290(
    .ap_ready(max_11_count_one_bit_fu_290_ap_ready),
    .input_seq_val(p_val2546_i_i7_fu_108),
    .ap_return(max_11_count_one_bit_fu_290_ap_return),
    .ap_rst(ap_rst)
);

SneakySnake_bit_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_return_preg <= global_count_fu_1192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_283)) begin
            global_count3_fu_88 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            global_count3_fu_88 <= global_count_2_fu_1003_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_283)) begin
            global_count_319_fu_100 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            global_count_319_fu_100 <= global_count_3_fu_1084_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        i2_fu_84 <= i_10_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_148)) begin
    i_2221_fu_104 <= i_fu_791_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
    if ((1'b1 == ap_condition_877)) begin
        icmp_ln64020_reg_218 <= icmp_ln640_reg_1452;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
        icmp_ln64020_reg_218 <= 1'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_148)) begin
    indvar_flatten1_fu_80 <= add_ln707_fu_765_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_148)) begin
    iter18_fu_96 <= iter_fu_777_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val1628_i_i16_fu_144 <= DNA_shl_one_reg_1402;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val1628_i_i16_fu_144 <= shl_ln664_fu_1103_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val1730_i_i15_fu_140 <= DNA_shl_two_reg_1407;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val1730_i_i15_fu_140 <= shl_ln665_fu_1112_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val1832_i_i14_fu_136 <= DNA_shl_three_reg_1412;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val1832_i_i14_fu_136 <= shl_ln666_fu_1121_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val1934_i_i13_fu_132 <= DNA_shl_four_reg_1417;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val1934_i_i13_fu_132 <= shl_ln667_fu_1130_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2036_i_i12_fu_128 <= DNA_shl_five_reg_1422;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2036_i_i12_fu_128 <= shl_ln668_fu_1139_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2138_i_i11_fu_124 <= DNA_shr_one_reg_1427;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2138_i_i11_fu_124 <= shl_ln669_fu_1148_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2240_i_i10_fu_120 <= DNA_shr_two_reg_1432;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2240_i_i10_fu_120 <= shl_ln670_fu_1157_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2342_i_i9_fu_116 <= DNA_shr_three_reg_1437;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2342_i_i9_fu_116 <= shl_ln671_fu_1166_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2444_i_i8_fu_112 <= DNA_shr_four_reg_1442;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2444_i_i8_fu_112 <= shl_ln672_fu_1176_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val2546_i_i7_fu_108 <= DNA_shr_five_reg_1447;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val2546_i_i7_fu_108 <= shl_ln673_fu_1186_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b0 == ap_block_pp0_stage0_11001)) begin
    if ((1'b1 == ap_condition_867)) begin
        p_val26_i_i17_fu_148 <= DNA_nsh_reg_1397;
    end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        p_val26_i_i17_fu_148 <= shl_ln663_fu_1094_p2;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DNA_nsh_reg_1397 <= DNA_nsh_fu_419_p2;
        DNA_shl_five_reg_1422 <= DNA_shl_five_fu_589_p2;
        DNA_shl_four_reg_1417 <= DNA_shl_four_fu_555_p2;
        DNA_shl_one_reg_1402 <= DNA_shl_one_fu_453_p2;
        DNA_shl_three_reg_1412 <= DNA_shl_three_fu_521_p2;
        DNA_shl_two_reg_1407 <= DNA_shl_two_fu_487_p2;
        DNA_shr_five_reg_1447 <= DNA_shr_five_fu_759_p2;
        DNA_shr_four_reg_1442 <= DNA_shr_four_fu_725_p2;
        DNA_shr_one_reg_1427 <= DNA_shr_one_fu_623_p2;
        DNA_shr_three_reg_1437 <= DNA_shr_three_fu_691_p2;
        DNA_shr_two_reg_1432 <= DNA_shr_two_fu_657_p2;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln64020_reg_218_pp0_iter1_reg <= icmp_ln64020_reg_218;
        icmp_ln707_reg_1457 <= icmp_ln707_fu_797_p2;
        max_10_reg_1501 <= max_10_fu_989_p3;
        or_ln706_reg_1393 <= or_ln706_fu_337_p2;
        p_val1628_i_i16_load_reg_1491 <= ap_sig_allocacmp_p_val1628_i_i16_load;
        p_val1730_i_i15_load_reg_1486 <= ap_sig_allocacmp_p_val1730_i_i15_load;
        p_val1832_i_i14_load_reg_1481 <= ap_sig_allocacmp_p_val1832_i_i14_load;
        p_val1934_i_i13_load_reg_1476 <= ap_sig_allocacmp_p_val1934_i_i13_load;
        p_val2036_i_i12_load_reg_1471 <= ap_sig_allocacmp_p_val2036_i_i12_load;
        p_val2138_i_i11_load_reg_1466 <= ap_sig_allocacmp_p_val2138_i_i11_load;
        p_val2240_i_i10_load_reg_1461 <= ap_sig_allocacmp_p_val2240_i_i10_load;
        p_val26_i_i17_load_reg_1496 <= ap_sig_allocacmp_p_val26_i_i17_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        global_count_2125_fu_92 <= global_count_fu_1192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln640_reg_1452 <= icmp_ln640_fu_785_p2;
    end
end

always @ (*) begin
    if (((icmp_ln707_fu_797_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_864)) begin
            ap_phi_mux_first_iter_06_phi_fu_232_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_06_phi_fu_232_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_06_phi_fu_232_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_06_phi_fu_232_p4 = 1'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_864)) begin
            ap_phi_mux_icmp_ln64020_phi_fu_221_p4 = icmp_ln640_reg_1452;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln64020_phi_fu_221_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln64020_phi_fu_221_p4 = icmp_ln640_reg_1452;
        end
    end else begin
        ap_phi_mux_icmp_ln64020_phi_fu_221_p4 = icmp_ln640_reg_1452;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_return = global_count_fu_1192_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i2_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i2_load = i2_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2221_load = 4'd1;
    end else begin
        ap_sig_allocacmp_i_2221_load = i_2221_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten1_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1_load = indvar_flatten1_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_iter18_load = 2'd0;
    end else begin
        ap_sig_allocacmp_iter18_load = iter18_fu_96;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val1628_i_i16_load = DNA_shl_one_reg_1402;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val1628_i_i16_load = shl_ln664_fu_1103_p2;
        end else begin
            ap_sig_allocacmp_p_val1628_i_i16_load = p_val1628_i_i16_fu_144;
        end
    end else begin
        ap_sig_allocacmp_p_val1628_i_i16_load = p_val1628_i_i16_fu_144;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val1730_i_i15_load = DNA_shl_two_reg_1407;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val1730_i_i15_load = shl_ln665_fu_1112_p2;
        end else begin
            ap_sig_allocacmp_p_val1730_i_i15_load = p_val1730_i_i15_fu_140;
        end
    end else begin
        ap_sig_allocacmp_p_val1730_i_i15_load = p_val1730_i_i15_fu_140;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val1832_i_i14_load = DNA_shl_three_reg_1412;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val1832_i_i14_load = shl_ln666_fu_1121_p2;
        end else begin
            ap_sig_allocacmp_p_val1832_i_i14_load = p_val1832_i_i14_fu_136;
        end
    end else begin
        ap_sig_allocacmp_p_val1832_i_i14_load = p_val1832_i_i14_fu_136;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val1934_i_i13_load = DNA_shl_four_reg_1417;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val1934_i_i13_load = shl_ln667_fu_1130_p2;
        end else begin
            ap_sig_allocacmp_p_val1934_i_i13_load = p_val1934_i_i13_fu_132;
        end
    end else begin
        ap_sig_allocacmp_p_val1934_i_i13_load = p_val1934_i_i13_fu_132;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val2036_i_i12_load = DNA_shl_five_reg_1422;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val2036_i_i12_load = shl_ln668_fu_1139_p2;
        end else begin
            ap_sig_allocacmp_p_val2036_i_i12_load = p_val2036_i_i12_fu_128;
        end
    end else begin
        ap_sig_allocacmp_p_val2036_i_i12_load = p_val2036_i_i12_fu_128;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val2138_i_i11_load = DNA_shr_one_reg_1427;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val2138_i_i11_load = shl_ln669_fu_1148_p2;
        end else begin
            ap_sig_allocacmp_p_val2138_i_i11_load = p_val2138_i_i11_fu_124;
        end
    end else begin
        ap_sig_allocacmp_p_val2138_i_i11_load = p_val2138_i_i11_fu_124;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val2240_i_i10_load = DNA_shr_two_reg_1432;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val2240_i_i10_load = shl_ln670_fu_1157_p2;
        end else begin
            ap_sig_allocacmp_p_val2240_i_i10_load = p_val2240_i_i10_fu_120;
        end
    end else begin
        ap_sig_allocacmp_p_val2240_i_i10_load = p_val2240_i_i10_fu_120;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if ((1'b1 == ap_condition_867)) begin
            ap_sig_allocacmp_p_val26_i_i17_load = DNA_nsh_reg_1397;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ap_sig_allocacmp_p_val26_i_i17_load = shl_ln663_fu_1094_p2;
        end else begin
            ap_sig_allocacmp_p_val26_i_i17_load = p_val26_i_i17_fu_148;
        end
    end else begin
        ap_sig_allocacmp_p_val26_i_i17_load = p_val26_i_i17_fu_148;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DNA_nsh_fu_419_p2 = (trunc_ln710_fu_407_p1 & select_ln710_2_fu_411_p3);

assign DNA_shl_five_fu_589_p2 = (trunc_ln711_4_fu_585_p1 & select_ln710_2_fu_411_p3);

assign DNA_shl_four_fu_555_p2 = (trunc_ln711_3_fu_551_p1 & select_ln710_2_fu_411_p3);

assign DNA_shl_one_fu_453_p2 = (trunc_ln711_fu_449_p1 & select_ln710_2_fu_411_p3);

assign DNA_shl_three_fu_521_p2 = (trunc_ln711_2_fu_517_p1 & select_ln710_2_fu_411_p3);

assign DNA_shl_two_fu_487_p2 = (trunc_ln711_1_fu_483_p1 & select_ln710_2_fu_411_p3);

assign DNA_shr_five_fu_759_p2 = (trunc_ln712_4_fu_755_p1 & select_ln710_2_fu_411_p3);

assign DNA_shr_four_fu_725_p2 = (trunc_ln712_3_fu_721_p1 & select_ln710_2_fu_411_p3);

assign DNA_shr_one_fu_623_p2 = (trunc_ln712_fu_619_p1 & select_ln710_2_fu_411_p3);

assign DNA_shr_three_fu_691_p2 = (trunc_ln712_2_fu_687_p1 & select_ln710_2_fu_411_p3);

assign DNA_shr_two_fu_657_p2 = (trunc_ln712_1_fu_653_p1 & select_ln710_2_fu_411_p3);

assign add_ln640_fu_771_p2 = (ap_sig_allocacmp_iter18_load + 2'd1);

assign add_ln658_fu_1070_p2 = (trunc_ln658_fu_1066_p1 + 2'd1);

assign add_ln707_fu_765_p2 = (ap_sig_allocacmp_indvar_flatten1_load + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_ignoreCallOp143 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp144 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp145 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp146 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp147 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp148 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp149 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp150 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp175 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp176 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp177 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_condition_148 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_283 = ((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_864 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1457 == 1'd0));
end

always @ (*) begin
    ap_condition_867 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln706_reg_1393 == 1'd1));
end

always @ (*) begin
    ap_condition_877 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln707_reg_1457 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign global_count_2_fu_1003_p3 = ((icmp_ln64020_reg_218_pp0_iter1_reg[0:0] == 1'b1) ? global_count_2125_fu_92 : global_count3_fu_88);

assign global_count_3_fu_1084_p2 = (select_ln706_fu_1076_p3 + add_ln658_fu_1070_p2);

assign global_count_fu_1192_p2 = (global_count_3_fu_1084_p2 + global_count_2_fu_1003_p3);

assign i_10_fu_343_p3 = ((ap_phi_mux_icmp_ln64020_phi_fu_221_p4[0:0] == 1'b1) ? ap_sig_allocacmp_i_2221_load : ap_sig_allocacmp_i2_load);

assign i_fu_791_p2 = (i_10_fu_343_p3 + 4'd1);

assign icmp_ln318_1_fu_913_p2 = ((max_2_count_one_bit_fu_250_ap_return > max_1_fu_905_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_2_fu_927_p2 = ((tmp_i_i_count_one_bit_fu_255_ap_return > max_3_fu_919_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_3_fu_941_p2 = ((max_5_count_one_bit_fu_260_ap_return > max_4_fu_933_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_4_fu_955_p2 = ((tmp_1_i_i_count_one_bit_fu_265_ap_return > max_6_fu_947_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_5_fu_969_p2 = ((max_8_count_one_bit_fu_270_ap_return > max_7_fu_961_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_6_fu_983_p2 = ((tmp_2_i_i_count_one_bit_fu_275_ap_return > max_9_fu_975_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_7_fu_1026_p2 = ((max_12_count_one_bit_fu_280_ap_return > max_10_reg_1501) ? 1'b1 : 1'b0);

assign icmp_ln318_8_fu_1038_p2 = ((tmp_3_i_i_count_one_bit_fu_285_ap_return > max_13_fu_1031_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_9_fu_1052_p2 = ((max_11_count_one_bit_fu_290_ap_return > max_14_fu_1044_p3) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_899_p2 = ((tmp_8_i_i_count_one_bit_fu_245_ap_return > max_count_one_bit_fu_240_ap_return) ? 1'b1 : 1'b0);

assign icmp_ln640_fu_785_p2 = ((iter_fu_777_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln707_fu_797_p2 = ((ap_sig_allocacmp_indvar_flatten1_load == 6'd35) ? 1'b1 : 1'b0);

assign icmp_ln710_fu_359_p2 = ((shl_ln_fu_351_p3 != 7'd0) ? 1'b1 : 1'b0);

assign iter_fu_777_p3 = ((ap_phi_mux_icmp_ln64020_phi_fu_221_p4[0:0] == 1'b1) ? 2'd1 : add_ln640_fu_771_p2);

assign lshr_ln710_fu_401_p2 = select_ln710_fu_381_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln711_1_fu_477_p2 = select_ln711_1_fu_469_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln711_2_fu_511_p2 = select_ln711_2_fu_503_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln711_3_fu_545_p2 = select_ln711_3_fu_537_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln711_4_fu_579_p2 = select_ln711_4_fu_571_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln711_fu_443_p2 = select_ln711_fu_435_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln712_1_fu_647_p2 = select_ln712_1_fu_639_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln712_2_fu_681_p2 = select_ln712_2_fu_673_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln712_3_fu_715_p2 = select_ln712_3_fu_707_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln712_4_fu_749_p2 = select_ln712_4_fu_741_p3 >> zext_ln710_fu_397_p1;

assign lshr_ln712_fu_613_p2 = select_ln712_fu_605_p3 >> zext_ln710_fu_397_p1;

assign max_10_fu_989_p3 = ((icmp_ln318_6_fu_983_p2[0:0] == 1'b1) ? tmp_2_i_i_count_one_bit_fu_275_ap_return : max_9_fu_975_p3);

assign max_13_fu_1031_p3 = ((icmp_ln318_7_fu_1026_p2[0:0] == 1'b1) ? max_12_count_one_bit_fu_280_ap_return : max_10_reg_1501);

assign max_14_fu_1044_p3 = ((icmp_ln318_8_fu_1038_p2[0:0] == 1'b1) ? tmp_3_i_i_count_one_bit_fu_285_ap_return : max_13_fu_1031_p3);

assign max_16_fu_1058_p3 = ((icmp_ln318_9_fu_1052_p2[0:0] == 1'b1) ? max_11_count_one_bit_fu_290_ap_return : max_14_fu_1044_p3);

assign max_16cast159_fu_1099_p1 = max_16_fu_1058_p3;

assign max_16cast160_fu_1108_p1 = max_16_fu_1058_p3;

assign max_16cast161_fu_1117_p1 = max_16_fu_1058_p3;

assign max_16cast162_fu_1126_p1 = max_16_fu_1058_p3;

assign max_16cast163_fu_1135_p1 = max_16_fu_1058_p3;

assign max_16cast164_fu_1144_p1 = max_16_fu_1058_p3;

assign max_16cast165_fu_1153_p1 = max_16_fu_1058_p3;

assign max_16cast166_fu_1162_p1 = max_16_fu_1058_p3;

assign max_16cast167_fu_1172_p1 = max_16_fu_1058_p3;

assign max_16cast168_fu_1182_p1 = max_16_fu_1058_p3;

assign max_16cast_fu_1090_p1 = max_16_fu_1058_p3;

assign max_1_fu_905_p3 = ((icmp_ln318_fu_899_p2[0:0] == 1'b1) ? tmp_8_i_i_count_one_bit_fu_245_ap_return : max_count_one_bit_fu_240_ap_return);

assign max_3_fu_919_p3 = ((icmp_ln318_1_fu_913_p2[0:0] == 1'b1) ? max_2_count_one_bit_fu_250_ap_return : max_1_fu_905_p3);

assign max_4_fu_933_p3 = ((icmp_ln318_2_fu_927_p2[0:0] == 1'b1) ? tmp_i_i_count_one_bit_fu_255_ap_return : max_3_fu_919_p3);

assign max_6_fu_947_p3 = ((icmp_ln318_3_fu_941_p2[0:0] == 1'b1) ? max_5_count_one_bit_fu_260_ap_return : max_4_fu_933_p3);

assign max_7_fu_961_p3 = ((icmp_ln318_4_fu_955_p2[0:0] == 1'b1) ? tmp_1_i_i_count_one_bit_fu_265_ap_return : max_6_fu_947_p3);

assign max_9_fu_975_p3 = ((icmp_ln318_5_fu_969_p2[0:0] == 1'b1) ? max_8_count_one_bit_fu_270_ap_return : max_7_fu_961_p3);

assign or_ln706_fu_337_p2 = (ap_phi_mux_icmp_ln64020_phi_fu_221_p4 | ap_phi_mux_first_iter_06_phi_fu_232_p4);

assign select_ln706_fu_1076_p3 = ((icmp_ln64020_reg_218_pp0_iter1_reg[0:0] == 1'b1) ? 2'd0 : global_count_319_fu_100);

assign select_ln710_1_fu_389_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? xor_ln710_fu_375_p2 : 7'd0);

assign select_ln710_2_fu_411_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? 8'd3 : 8'd255);

assign select_ln710_fu_381_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_fu_365_p4 : p_read);

assign select_ln711_1_fu_469_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_8_fu_459_p4 : p_read2);

assign select_ln711_2_fu_503_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_9_fu_493_p4 : p_read3);

assign select_ln711_3_fu_537_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_10_fu_527_p4 : p_read4);

assign select_ln711_4_fu_571_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_11_fu_561_p4 : p_read5);

assign select_ln711_fu_435_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_7_fu_425_p4 : p_read1);

assign select_ln712_1_fu_639_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_13_fu_629_p4 : p_read7);

assign select_ln712_2_fu_673_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_14_fu_663_p4 : p_read8);

assign select_ln712_3_fu_707_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_15_fu_697_p4 : p_read9);

assign select_ln712_4_fu_741_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_16_fu_731_p4 : p_read10);

assign select_ln712_fu_605_p3 = ((icmp_ln710_fu_359_p2[0:0] == 1'b1) ? tmp_12_fu_595_p4 : p_read6);

assign shl_ln663_fu_1094_p2 = p_val26_i_i17_load_reg_1496 << max_16cast_fu_1090_p1;

assign shl_ln664_fu_1103_p2 = p_val1628_i_i16_load_reg_1491 << max_16cast159_fu_1099_p1;

assign shl_ln665_fu_1112_p2 = p_val1730_i_i15_load_reg_1486 << max_16cast160_fu_1108_p1;

assign shl_ln666_fu_1121_p2 = p_val1832_i_i14_load_reg_1481 << max_16cast161_fu_1117_p1;

assign shl_ln667_fu_1130_p2 = p_val1934_i_i13_load_reg_1476 << max_16cast162_fu_1126_p1;

assign shl_ln668_fu_1139_p2 = p_val2036_i_i12_load_reg_1471 << max_16cast163_fu_1135_p1;

assign shl_ln669_fu_1148_p2 = p_val2138_i_i11_load_reg_1466 << max_16cast164_fu_1144_p1;

assign shl_ln670_fu_1157_p2 = p_val2240_i_i10_load_reg_1461 << max_16cast165_fu_1153_p1;

assign shl_ln671_fu_1166_p2 = p_val2342_i_i9_fu_116 << max_16cast166_fu_1162_p1;

assign shl_ln672_fu_1176_p2 = p_val2444_i_i8_fu_112 << max_16cast167_fu_1172_p1;

assign shl_ln673_fu_1186_p2 = p_val2546_i_i7_fu_108 << max_16cast168_fu_1182_p1;

assign shl_ln_fu_351_p3 = {{i_10_fu_343_p3}, {3'd0}};

integer ap_tvar_int_0;

always @ (p_read4) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_10_fu_527_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_527_p4[ap_tvar_int_0] = p_read4[127 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_read5) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_11_fu_561_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_561_p4[ap_tvar_int_1] = p_read5[127 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_read6) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_12_fu_595_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_12_fu_595_p4[ap_tvar_int_2] = p_read6[127 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_read7) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 127 - 0) begin
            tmp_13_fu_629_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_13_fu_629_p4[ap_tvar_int_3] = p_read7[127 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (p_read8) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_14_fu_663_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_14_fu_663_p4[ap_tvar_int_4] = p_read8[127 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (p_read9) begin
    for (ap_tvar_int_5 = 128 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 127 - 0) begin
            tmp_15_fu_697_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_15_fu_697_p4[ap_tvar_int_5] = p_read9[127 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (p_read10) begin
    for (ap_tvar_int_6 = 128 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 127 - 0) begin
            tmp_16_fu_731_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_16_fu_731_p4[ap_tvar_int_6] = p_read10[127 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (p_read1) begin
    for (ap_tvar_int_7 = 128 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 127 - 0) begin
            tmp_7_fu_425_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_7_fu_425_p4[ap_tvar_int_7] = p_read1[127 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (p_read2) begin
    for (ap_tvar_int_8 = 128 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 127 - 0) begin
            tmp_8_fu_459_p4[ap_tvar_int_8] = 1'b0;
        end else begin
            tmp_8_fu_459_p4[ap_tvar_int_8] = p_read2[127 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (p_read3) begin
    for (ap_tvar_int_9 = 128 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 127 - 0) begin
            tmp_9_fu_493_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            tmp_9_fu_493_p4[ap_tvar_int_9] = p_read3[127 - ap_tvar_int_9];
        end
    end
end

integer ap_tvar_int_10;

always @ (p_read) begin
    for (ap_tvar_int_10 = 128 - 1; ap_tvar_int_10 >= 0; ap_tvar_int_10 = ap_tvar_int_10 - 1) begin
        if (ap_tvar_int_10 > 127 - 0) begin
            tmp_fu_365_p4[ap_tvar_int_10] = 1'b0;
        end else begin
            tmp_fu_365_p4[ap_tvar_int_10] = p_read[127 - ap_tvar_int_10];
        end
    end
end

assign trunc_ln658_fu_1066_p1 = max_16_fu_1058_p3[1:0];

assign trunc_ln710_fu_407_p1 = lshr_ln710_fu_401_p2[7:0];

assign trunc_ln711_1_fu_483_p1 = lshr_ln711_1_fu_477_p2[7:0];

assign trunc_ln711_2_fu_517_p1 = lshr_ln711_2_fu_511_p2[7:0];

assign trunc_ln711_3_fu_551_p1 = lshr_ln711_3_fu_545_p2[7:0];

assign trunc_ln711_4_fu_585_p1 = lshr_ln711_4_fu_579_p2[7:0];

assign trunc_ln711_fu_449_p1 = lshr_ln711_fu_443_p2[7:0];

assign trunc_ln712_1_fu_653_p1 = lshr_ln712_1_fu_647_p2[7:0];

assign trunc_ln712_2_fu_687_p1 = lshr_ln712_2_fu_681_p2[7:0];

assign trunc_ln712_3_fu_721_p1 = lshr_ln712_3_fu_715_p2[7:0];

assign trunc_ln712_4_fu_755_p1 = lshr_ln712_4_fu_749_p2[7:0];

assign trunc_ln712_fu_619_p1 = lshr_ln712_fu_613_p2[7:0];

assign xor_ln710_fu_375_p2 = (shl_ln_fu_351_p3 ^ 7'd127);

assign zext_ln710_fu_397_p1 = select_ln710_1_fu_389_p3;

endmodule //SneakySnake_bit_Loop_VITIS_LOOP_707_1_proc
